{
    "version": "https://jsonfeed.org/version/1",
    "title": "圥忈的博客",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/05/25/1/",
            "url": "http://example.com/2024/05/25/1/",
            "title": "'1'",
            "date_published": "2024-05-25T04:11:14.000Z",
            "content_html": "<p>初审、</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/05/21/matlab/",
            "url": "http://example.com/2024/05/21/matlab/",
            "title": "'matlab'",
            "date_published": "2024-05-21T10:32:06.000Z",
            "content_html": "<h2 id=\"matlab变量命名规则\"><a class=\"markdownIt-Anchor\" href=\"#matlab变量命名规则\">#</a> MATLAB 变量命名规则</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名区分大小写。</span><br><span class=\"line\">变量名长度不超过63位。</span><br><span class=\"line\">变量名以字母开头，可以有字母、数字和下划线组成。但不能使用标点。</span><br><span class=\"line\">变量名简洁明了，通过变量名可以直观看出变量所表示的物理意义。</span><br></pre></td></tr></table></figure>\n<h2 id=\"matlab命令\"><a class=\"markdownIt-Anchor\" href=\"#matlab命令\">#</a> MATLAB 命令</h2>\n<h3 id=\"1清空环境变量及命令\"><a class=\"markdownIt-Anchor\" href=\"#1清空环境变量及命令\">#</a> 1. 清空环境变量及命令</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all      清除Workspace中的所有变量</span><br><span class=\"line\">clc            清除Command Window中的所有命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"2注释\"><a class=\"markdownIt-Anchor\" href=\"#2注释\">#</a> 2. 注释</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%    有横线注释</span><br><span class=\"line\">%     没有横线注释</span><br></pre></td></tr></table></figure>\n<h3 id=\"3运算\"><a class=\"markdownIt-Anchor\" href=\"#3运算\">#</a> 3. 运算</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加+\t减-\t乘*\t除/</span><br></pre></td></tr></table></figure>\n<h3 id=\"4字符与字符串\"><a class=\"markdownIt-Anchor\" href=\"#4字符与字符串\">#</a> 4. 字符与字符串</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = &#x27;a&#x27;</span><br><span class=\"line\">abs(a) = 97      绝对值  ascall码</span><br><span class=\"line\">char(97) = a      字符串</span><br><span class=\"line\">length( )         计算字符串的长度</span><br></pre></td></tr></table></figure>\n<h3 id=\"5num2str\"><a class=\"markdownIt-Anchor\" href=\"#5num2str\">#</a> 5.num2str</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = num2str(A)</span><br><span class=\"line\">s = num2str(A,precision)</span><br><span class=\"line\">s = num2str(A,formatSpec)</span><br><span class=\"line\"></span><br><span class=\"line\">s = num2str(A) 将数值数组转换为表示数字的字符数组。输出格式取决于原始值的量级。num2str 对使用数值为绘图添加标签和标题非常有用。</span><br><span class=\"line\">s = num2str(A,precision)返回表示数字的字符数组，最大有效位数由 precision 指定。</span><br><span class=\"line\">s = num2str(A,formatSpec) 将 formatSpec 指定的格式应用到 A 所有元素。</span><br></pre></td></tr></table></figure>\n<h6 id=\"randn函数\"><a class=\"markdownIt-Anchor\" href=\"#randn函数\">#</a> randn () 函数</h6>\n<p>randn () 函数用于产生正态分布的随机数，其调用格式和 rand () 函数基本一致，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=randn % 返回一个标准正态分布的随机向量</span><br><span class=\"line\">X=randn(n) % 产生nxn的矩阵，元素为一个标准正态分布中的值</span><br><span class=\"line\">X=randn(x,y) %产生xxy的矩阵，元素为一个标准正态分布中的值</span><br><span class=\"line\">X=randn(sz) %sz为矩阵，产生size(sz)大小的矩阵</span><br><span class=\"line\">X=randn(...,typename)% typename可以是&#x27;single&#x27;或&#x27;double&#x27;，产生对应数据类型的随机数</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r=randn;</span><br><span class=\"line\">disp(r)</span><br><span class=\"line\">X=randn(2,3);</span><br><span class=\"line\">disp(X)</span><br><span class=\"line\"></span><br><span class=\"line\">-1.1658</span><br><span class=\"line\">-1.1480\t\t0.7223\t\t-0.6669</span><br><span class=\"line\"> 0.1049\t\t2.5855\t\t 0.1873</span><br></pre></td></tr></table></figure>\n<h6 id=\"randi函数\"><a class=\"markdownIt-Anchor\" href=\"#randi函数\">#</a> randi () 函数</h6>\n<p>randi () 函数用于生成伪随机整数，也就是产生整数的函数。调用格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=randi(imax) %返回一个(1,imax)之间的随机整数</span><br><span class=\"line\">X=randi(imax,n)  %返回nxn的矩阵，元素为(1,imax)之间的随机整数</span><br><span class=\"line\">X=randi(imax,sz1,sz2) %返回sz1xsz2的矩阵，元素为(1,imax)之间的随机整数</span><br><span class=\"line\">X=randi(imax,sz) %sz为矩阵，返回size(sz)大小元素为(1,imax)之间的随机整数</span><br><span class=\"line\">X=randi([imin,imax],...) %返回imin到imax之间的随机整数</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=randi(5);</span><br><span class=\"line\">disp(X)</span><br><span class=\"line\">X=randi(10,2,2);</span><br><span class=\"line\">disp(X)</span><br><span class=\"line\">X=randi([5,10],[2,2]);</span><br><span class=\"line\">disp(X)</span><br><span class=\"line\"></span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\">1\t\t10</span><br><span class=\"line\">3\t\t 2</span><br><span class=\"line\"></span><br><span class=\"line\">9\t\t10</span><br><span class=\"line\">8\t\t 5</span><br></pre></td></tr></table></figure>\n<h6 id=\"randperm函数\"><a class=\"markdownIt-Anchor\" href=\"#randperm函数\">#</a> randperm () 函数</h6>\n<p>randperm () 函数用于生成一组整数的随机排列，调用格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=randperm(n) %返回一个1~n的随机排列其不重复的行向量</span><br><span class=\"line\">p=randperm(n,k) %返回一个1~n的随机排列其不重复的行向量</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=randperm(10);</span><br><span class=\"line\">disp(X)</span><br><span class=\"line\">X=randperm(10,5);</span><br><span class=\"line\">disp(X)</span><br><span class=\"line\"></span><br><span class=\"line\">4\t\t8\t\t 2\t\t10\t\t9\t\t1\t\t5\t\t6\t\t7\t\t3</span><br><span class=\"line\"></span><br><span class=\"line\">7\t\t3\t\t10\t\t8\t\t6</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵\"><a class=\"markdownIt-Anchor\" href=\"#矩阵\">#</a> 矩阵</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = [1 2 3:4 5 6:7 8 9]   用空格或逗号间隔用:分割</span><br><span class=\"line\">B = A&#x27;                    B等于A的转置[1 4 7:2 5 8:3 6 9]</span><br><span class=\"line\">C = A(:)                  把A矩阵拉长[1:4:7:2:5:8:3:6:9]</span><br><span class=\"line\">D = inv(A)                求逆</span><br><span class=\"line\">A * D</span><br><span class=\"line\">生成全是0的矩阵</span><br><span class=\"line\">E = zeros(行，列，维度)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rand、randi和randn的区别？ </span><br><span class=\"line\">1,rand生成均匀分布的伪随机数。分布在(0~1)之间主要语法:rand(m,n)生成m行n列的均匀分布的伪随机数</span><br><span class=\"line\">rand(m.n,&#x27;double&#x27;)生成指定精度的均匀分布的伪随机数，参数还可以是&#x27;single&#x27; </span><br><span class=\"line\">rand(Randstream,m,n)利用指定的RandStream(我理解为随机种子)生成伪</span><br><span class=\"line\">随机数</span><br><span class=\"line\">2,randn生成标准正态分布的伪随机数(均值为0，方差为1) </span><br><span class=\"line\">主要语法:和上面一样</span><br><span class=\"line\">3,randi生成均匀分布的伪随机整数</span><br><span class=\"line\">主要语法:randi(iMax)在开区间(0,iMax)生成均匀分布的伪随机整数</span><br><span class=\"line\">randi (iMax, m, n)在开区间(0,iMax)生成mXn型随机矩阵</span><br><span class=\"line\">[= randi([iMin,iMax],m,n)在开区间(iMin, iMax)生成mXn型随机矩阵</span><br></pre></td></tr></table></figure>\n<h2 id=\"元胞数组\"><a class=\"markdownIt-Anchor\" href=\"#元胞数组\">#</a> 元胞数组</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元胞数组是MATLAB中特有的一种数据类型，是数组的一种，其内部元素可以是属于不同的数据类型，概念理解上，可以认为它和c语言里面的结构体、C++里面的对象很类似。元胞数组是matlab中的特色数据类型，它不同于其它数据类型(如字符型，字符数组或者叫字符串，以及一般的算术数据和数组)。它特有的存取数据方法决定了它的特点， 它有给人一种查询信息的感觉，可以逐渐追踪一直到所有的变量全部翻译成基本的数据信息。它的class函数输出就是cell (细胞之意)。 </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在MATLAB中，数组索引是从1开始的，而不是从0开始。这与许多其他编程语言（如C、C++、Java、Python等）的习惯不同，在这些语言中，数组索引是从0开始的。</span><br><span class=\"line\"></span><br><span class=\"line\">举个例子，如果你有一个MATLAB数组A，它有5个元素，那么这些元素的索引将是1到5：</span><br><span class=\"line\"></span><br><span class=\"line\">A = [10 20 30 40 50];</span><br><span class=\"line\">element1 = A(1);  % 访问第一个元素</span><br><span class=\"line\">element2 = A(2);  % 访问第二个元素</span><br><span class=\"line\">element5 = A(5);  % 访问第五个元素</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = cell(1,6)一行六列</span><br><span class=\"line\">[]\t\t[]\t\t[]\t\t[]\t\t[]\t\t[]</span><br><span class=\"line\">A&#123;2&#125; = eye(3)索引从一开始与python不同  把eye放在第二个格子中</span><br><span class=\"line\">eye(3)生成一个3行3列对角元素为1，其他元素为0的矩阵</span><br><span class=\"line\">[]\t\t[3X3 double]\t []\t\t[]\t\t[]\t\t[]</span><br><span class=\"line\">A&#123;5&#125; = magic(5)</span><br><span class=\"line\">17\t24\t 1\t 8\t15</span><br><span class=\"line\">23\t 5\t 7\t14\t16</span><br><span class=\"line\"> 4\t 6\t13\t20\t22</span><br><span class=\"line\">10\t12\t19\t21\t 3</span><br><span class=\"line\">11\t18\t25\t 2\t 9</span><br><span class=\"line\">B = A&#123;5&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAGIC </span><br><span class=\"line\">·magic字面意思是魔方，魔术的意思。在matlab中用来生成n阶幻方。比如三阶幻方就是1-9九个数字，组成一个3*3的矩阵，使得该矩阵无论横、竖还是斜三个方向上的三个数的和总是相同的。幻方是一个很古老的问题，你试一下就知道了！ </span><br><span class=\"line\">·magic(n)生成一个n阶幻方，就是把1-n^2排成一个nxn的矩阵，使得矩阵的每行、 每列，以及主、副对角线上面的n个数之和都相等(容易证明，这个和等于n*(nA2+1)/2). </span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a class=\"markdownIt-Anchor\" href=\"#结构体\">#</a> 结构体</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">books = struct(&#x27;name&#x27;,&#123;&#123;&#x27;Machine Learning&#x27;,&#x27;Data Mining&#x27;&#125;&#125;,&#x27;price&#x27;,[30 40])</span><br><span class=\"line\"></span><br><span class=\"line\">books.name               %属性 </span><br><span class=\"line\">&#x27;Machine Learning&#x27; &#x27;Data Mining&#x27;</span><br><span class=\"line\">books.name(1)</span><br><span class=\"line\">&#x27;Machine Learning&#x27;                       cell</span><br><span class=\"line\">books.name&#123;1&#125;</span><br><span class=\"line\">Machine Learning                         字符串</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "matlab"
            ]
        },
        {
            "id": "http://example.com/2024/05/15/rsa/",
            "url": "http://example.com/2024/05/15/rsa/",
            "title": "'rsa'",
            "date_published": "2024-05-15T05:47:22.000Z",
            "content_html": "<h1 id=\"ctf-rsapython安装及pycharm配置\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsapython安装及pycharm配置\">#</a> 【CTF-RSA】python 安装及 pycharm 配置</h1>\n<p>python3 官网下载地址<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvd2luZG93cy8=\"> https://www.python.org/downloads/windows/</span></p>\n<p>python 编译器 pycharm Community 下载地址<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9weWNoYXJtL2Rvd25sb2FkLyNzZWN0aW9uPXdpbmRvd3M=\"> https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows</span></p>\n<p>pycharm 汉化插件<br>\n打开 pycharm 左上角的 file (文件) &gt; 选择 settings (设置) &gt; 打开 plugins (插件) &gt; 搜索 chinese (中文插件), 下载好后重启 pycharm</p>\n<p>pycharm 设置虚拟环境<br>\n设置虚拟环境的好处是：</p>\n<p>1. 方便移植和重装系统以后，安装模块</p>\n<p>2. 避免安装较多模块，发生冲突</p>\n<p>pycharm 安装库及设置国内镜像<br>\n中国科技大学 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXBpLm1pcnJvcnMudXN0Yy5lZHUuY24vc2ltcGxlLw==\">https://pypi.mirrors.ustc.edu.cn/simple/</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装 libnum 库</span><br><span class=\"line\">pip install libnum -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class=\"line\">安装 pycryptodome库</span><br><span class=\"line\">pip install pycryptodome -i https://pypi.mirrors.ustc.edu.cn/simple/ </span><br></pre></td></tr></table></figure>\n<p>gmpy2 及相关库安装<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGZkLnVjaS5lZHUvfmdvaGxrZS9weXRob25saWJzLw==\"> https://www.lfd.uci.edu/~gohlke/pythonlibs/</span></p>\n<p>在该网页中找到 gmpy2, 注意找对应得版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmpy2‑2.0.8‑cp39‑cp39‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp39‑cp39‑win32.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp38‑cp38‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp38‑cp38‑win32.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp37‑cp37m‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp37‑cp37m‑win32.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp36‑cp36m‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp36‑cp36m‑win32.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp35‑cp35m‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp35‑cp35m‑win32.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp34‑cp34m‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp34‑cp34m‑win32.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp27‑cp27m‑win_amd64.whl</span><br><span class=\"line\">gmpy2‑2.0.8‑cp27‑cp27m‑win32.whl</span><br></pre></td></tr></table></figure>\n<p>N（Modulus）：模数，是两个大素数 P 和 Q 的乘积。N 的长度决定了 RSA 算法的安全性。</p>\n<p>E（Public Exponent）：公钥指数，通常为 65537（0x10001）。E 用于加密数据，是公钥的一部分。</p>\n<p>P（Prime Factor）：素数 P，是模数 N 的一个因子。</p>\n<p>Q（Prime Factor）：素数 Q，是模数 N 的另一个因子。</p>\n<p>DP（D mod (P-1)）：D 对 (P-1) 取模的结果，用于解密数据。</p>\n<p>DQ（D mod (Q-1)）：D 对 (Q-1) 取模的结果，用于解密数据。</p>\n<p>Qinv（Q^-1 mod P）：Q 的模 P 的乘法逆元，用于解密数据。</p>\n<p>D（Private Exponent）：私钥指数，用于解密数据或生成数字签名</p>\n<h1 id=\"ctf-rsarsa简介及原理\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsarsa简介及原理\">#</a> 【CTF-RSA】RSA 简介及原理</h1>\n<h2 id=\"rsa算法简介\"><a class=\"markdownIt-Anchor\" href=\"#rsa算法简介\">#</a> rsa 算法简介</h2>\n<p>RSA 是公钥密码体制，是一种使用不同的加密密钥与解密密钥</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/5fb3c27329b8976a11a47a59deb864d84769fda0.png%401256w_478h_!web-article-pic.avif\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/8a70da17879fa97dbf424abbeb5a4ff94e1ad396.png%401256w_358h_!web-article-pic.avif\" alt=\"\"></p>\n<h2 id=\"rsa算法原理\"><a class=\"markdownIt-Anchor\" href=\"#rsa算法原理\">#</a> rsa 算法原理</h2>\n<h3 id=\"欧拉函数φn\"><a class=\"markdownIt-Anchor\" href=\"#欧拉函数φn\">#</a> 欧拉函数 φ(n)</h3>\n<p>欧拉函数 φ(n) 的定义是小于 n 的自然数中与 n 互质的数的个数</p>\n<h3 id=\"欧拉定理\"><a class=\"markdownIt-Anchor\" href=\"#欧拉定理\">#</a> 欧拉定理</h3>\n<p>若 n,a 为正整数，且 n,a 互质，则:a^φ(n)≡1 mod n</p>\n<h3 id=\"费马小定理\"><a class=\"markdownIt-Anchor\" href=\"#费马小定理\">#</a> 费马小定理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/7f87d43d837599c2d6d759300d780c7ef60f336f.png%401256w_274h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"模运算\"><a class=\"markdownIt-Anchor\" href=\"#模运算\">#</a> 模运算</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a + b) % p = (a % p + b % p) % p</span><br><span class=\"line\">(a - b) % p = (a % p - b % p) % p</span><br><span class=\"line\">(a * b) % p = (a % p * b % p) % p</span><br><span class=\"line\">a ^ b % p = ((a % p) ^ b) % p</span><br><span class=\"line\">结合律</span><br><span class=\"line\">((a + b) % p + c) = (a + (b + c) % p) % p</span><br><span class=\"line\">((a * b) % p * c) = (a * (b * c) % p) % p</span><br><span class=\"line\">交换律</span><br><span class=\"line\">(a + b) % p = (b + a) % p</span><br><span class=\"line\">(a * b) % p = (b * a) % p</span><br><span class=\"line\">分配律</span><br><span class=\"line\">(a + b) % p = (a % p + b % p) % p</span><br><span class=\"line\">((a + b) % p * c) % p = ((a * c) % p + (b * c) % p</span><br><span class=\"line\">重要定理</span><br><span class=\"line\">若 a ≡ b (mod p)，则对于任意的 c，都有(a + c) ≡ (b + c) (mod p)</span><br><span class=\"line\">若 a ≡ b (mod p)，则对于任意的 c，都有(a * c) ≡ (b * c) (mod p)</span><br><span class=\"line\">若 a ≡ b (mod p)，c ≡ d (mod p)，则</span><br><span class=\"line\">(a + c) ≡ (b + d) (mod p)</span><br><span class=\"line\">(a - c) ≡ (b - d) (mod p)</span><br><span class=\"line\">(a * c) ≡ (b * d) (mod p)</span><br><span class=\"line\">(a / c) ≡ (b / d) (mod p)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">逆元</span><br><span class=\"line\">a mod p的逆元便是可以使 a * a&#x27; mod p = 1 的最小a&#x27;。</span><br></pre></td></tr></table></figure>\n<h3 id=\"推导过程\"><a class=\"markdownIt-Anchor\" href=\"#推导过程\">#</a> 推导过程</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">式1：c=m^e%N</span><br><span class=\"line\">式2：m=c^d%N</span><br></pre></td></tr></table></figure>\n<p>将式 1 带入式 2 得 m = (m ^ e % N) ^ d % N</p>\n<p>需要证明：m == (m ^ e % N) ^ d % N</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(m^e%N)^d%N</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;  (m^e)^d%N #模运算 a ^ b % p = ((a % p) ^ b) % p</span><br><span class=\"line\"></span><br><span class=\"line\">m^(e*d)%N #幂的乘方，底数不变，指数相乘</span><br></pre></td></tr></table></figure>\n<p>将 e * d ≡ 1 (mod φ(N)) 即 e * d = K * φ(N) + 1，K 为任意正整数，代入得：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=&gt; (m^(K*φ(N)+1))%N</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (m^(K*φ(N)*m^1)%N # 同底数相乘，指数相加</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (m^(K*φ(N)*m)%N</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ((m^φ(N)^K%N*m)%N # 幂的乘方，底数不变，指数相乘</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ((m^φ(N)^K%N*m%N)%N # (a * b) % p = (a % p * b % p) % p</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ((m^φ(N)%N)^K%N*m%N)%N # a ^ b % p = ((a % p) ^ b) % p</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (1^K%N*m%N)%N # 根据欧拉定理：a^φ(n)≡1 mod n 即 a^φ(n) mod n = 1</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (m%N)%N # 1^K%N=1</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (m%N)%N</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (m%N)^1%N</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (m^1)%N   # a ^ b % p = ((a % p) ^ b) % p</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; m%N</span><br><span class=\"line\"></span><br><span class=\"line\">m  #因为 m &lt; N</span><br></pre></td></tr></table></figure>\n<h1 id=\"ctf-rsarsa基础题目及脚本\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsarsa基础题目及脚本\">#</a> 【CTF-RSA】RSA 基础题目及脚本</h1>\n<h3 id=\"随机生成flag\"><a class=\"markdownIt-Anchor\" href=\"#随机生成flag\">#</a> 随机生成 flag</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">#字符串列表</span><br><span class=\"line\">a=string.printable</span><br><span class=\"line\">#随机生成flag</span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    flag = &quot;&quot;</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        flag += a[random.randint(0, 99)]</span><br><span class=\"line\">    flag = hashlib.md5(flag.encode()).hexdigest()</span><br><span class=\"line\">    print(&quot;flag&#123;&quot; + flag + &quot;&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">from uuid import uuid1</span><br><span class=\"line\">flag=&quot;flag&#123;&quot;+str(uuid1())+&quot;&#125;&quot;</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/6bb7113e6f3e65e1f762f2565539c32563b340c1.png%40!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"出题脚本\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">#生成随机素数</span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">q=libnum.generate_prime(1024)</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">m=&quot;flag&#123;20d6e2da95dcc1fa5f5432a436c4be18&#125;&quot;</span><br><span class=\"line\">#字符串转数字</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;p=&quot;,p)</span><br><span class=\"line\">print(&quot;q=&quot;,q)</span><br><span class=\"line\">print (&quot;n=&quot;,n)</span><br><span class=\"line\">print(&quot;d=&quot;,d)</span><br><span class=\"line\">print (&quot;e=&quot;,e)</span><br><span class=\"line\">print (&quot;c=&quot;,c) </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/d7ebf723ee05575e951a9dcebe6c6e8899e90e93.png%401256w_350h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"已知ndec求m\"><a class=\"markdownIt-Anchor\" href=\"#已知ndec求m\">#</a> 已知 n,d,e,c 求 m</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">n= 14685532699024100754723222996385121368294636639693750794149020559314539676501066491415844320990799035552463714403031072164829458702780715523923962246149328887690893262271480633736651143634392056066729487305166335857950659680699210683976952113003674104898343893168719508462975991580551696824510044412974267585312807460664570245139015568859112921920860421973308538800641652781742897528769692264955229878206911313791989518088100099218315995549914435278654377368771668058107642713121127495780090852489015591581414806590111818355121157794129813430710822697558144598815860067978324469091074823400715400666808772858128261149</span><br><span class=\"line\">d= 10655677501818714057545408290692306276248758047017058020876274084213258239416744966450976471246402284779991562186357882946337721435118045765127426899173581894141706933500094886492805160951008521020815528782559085235105783294876017603112074153984218299742602608478449101819428678878037976091306073545785820932796422483686522431260926680891531210950251782422010888047909274618007401655588566411972291526501884077240225819170340160706732901152519829956055255218835518533347875405883278225018714890042991619568316304958478955576005445279807142753050999269866987221510643119355301877102904394259290548609330522059178100989</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">c= 7937297427288435728721973474925856865675225171317301007619581716746999628275946964127516634203401830643076435690247635478297903236185011960902817030042080567027165802992734580344202744697251074454156026031417427325660809453340428989949816426637434868049018580855865080715251672252410696685286047485204432648545886024276695749435709592994477514818763551176789963387889424072650811645828675090859926233585219662579177051353763021116106877502871331756544361402971459889233069752657661921397258845893293005099736406362733668960163109452223071514272504206470939914043855546880424121530822318600645513435826636440478681928</span><br><span class=\"line\"></span><br><span class=\"line\">m=pow(c, d, n)</span><br><span class=\"line\">print(libnum.n2s(m).decode()) </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/78c48eb00ccb1dc84f95ef53eaec99891fa2affc.png%401256w_304h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"已知pqec求m\"><a class=\"markdownIt-Anchor\" href=\"#已知pqec求m\">#</a> 已知 p,q,e,c 求 m</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">p= 178974110759313878895493455207516672882434662571655460770401953730906926302476821805659378622536968418528094957044346203494793341636459433763427491907849563922785749794854266865548657682445692416895365631610849027415100889893466490767087266542637440212533807985124840688092762928583845838066174446047886496977</span><br><span class=\"line\">q= 93610871651220602641323046206103959524660743045950590135111801621145944725719667412027010040112514078098465817329474817485502356054795293086881519931215167856745860801666777619204160653243683622930567962804914581845602027547589056026105213437044768786486688576038889017989891165091320977401144724582916902269</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">c= 10505609204533893330224001468185225454647695615253006709365840521320011117703729471412769493857753605106376689659952882885215696765275778768339621441610719177208351696489476567331875339672513868473669863672226315682278831184868041476134806131989809014422520472566202048041013413698358733781909446846787304422628166599338803127610040714545537436536348608012176828441837378861024372912755344397449657260043057239911064546424582314518819235470388313710641962070846850292694572345451390561142917224092435026246696084949470913298543523893386679712766629009873176804118782436042080621119334193337953451160118095182279971122</span><br><span class=\"line\"></span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\"></span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">d=libnum.invmod(e,phi_n)</span><br><span class=\"line\"></span><br><span class=\"line\">m=pow(c,d,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">#数字转字节，转字符串</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode()) </span><br></pre></td></tr></table></figure>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tlZXAyMTIvbmltYS9tYWluLyVFNSVCMSU4RiVFNSVCOSU5NSVFNiU4OCVBQSVFNSU5QiVCRQ==\">https://raw.githubusercontent.com/keep212/nima/main/ 屏幕截图</span> 2024-05-15 140447.png)</p>\n<h1 id=\"ctf-rsa基于n分解的rsa题目\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsa基于n分解的rsa题目\">#</a> 【CTF-RSA】基于 N 分解的 RSA 题目</h1>\n<p>对 N 进行分解（只要知道 p 和 q, 就能解出任何 rsa）</p>\n<p>N 在有一般情况下不可分解的，如果 p 和 q 太接近，或相差过大，或 pq 很小等情况</p>\n<h3 id=\"1在线查询分解网站\"><a class=\"markdownIt-Anchor\" href=\"#1在线查询分解网站\">#</a> 1. 在线查询分解网站</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mYWN0b3JkYi5jb20vaW5kZXgucGhw\">http://www.factordb.com/index.php</span></p>\n<h3 id=\"2使用yafu工具分解\"><a class=\"markdownIt-Anchor\" href=\"#2使用yafu工具分解\">#</a> 2. 使用 yafu 工具分解</h3>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMveWFmdS8=\">https://sourceforge.net/projects/yafu/</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#以分解49为例</span><br><span class=\"line\">yafu-x64.exe factor(49)</span><br><span class=\"line\"></span><br><span class=\"line\">#导入文件进行分解，主要注意文本结尾要换行！！！不然要报错</span><br><span class=\"line\">yafu-x64.exe &quot;factor(@)&quot; -batchfile 1.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"3使用费马分解\"><a class=\"markdownIt-Anchor\" href=\"#3使用费马分解\">#</a> 3. 使用费马分解</h3>\n<p>网上找的脚本，p 和 q 太接近</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def isqrt(n):</span><br><span class=\"line\">  x = n</span><br><span class=\"line\">  y = (x + n // x) // 2</span><br><span class=\"line\">  while y &lt; x:</span><br><span class=\"line\">    x = y</span><br><span class=\"line\">    y = (x + n // x) // 2</span><br><span class=\"line\">  return x</span><br><span class=\"line\"></span><br><span class=\"line\">def fermat(n, verbose=True):</span><br><span class=\"line\">    a = isqrt(n) # int(ceil(n**0.5))</span><br><span class=\"line\">    b2 = a*a - n</span><br><span class=\"line\">    b = isqrt(n) # int(b2**0.5)</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    while b*b != b2:</span><br><span class=\"line\">        # if verbose:</span><br><span class=\"line\">        #     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span><br><span class=\"line\">        a = a + 1</span><br><span class=\"line\">        b2 = a*a - n</span><br><span class=\"line\">        b = isqrt(b2) # int(b2**0.5)</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">    p=a+b</span><br><span class=\"line\">    q=a-b</span><br><span class=\"line\">    assert n == p * q</span><br><span class=\"line\">    # print(&#x27;a=&#x27;,a)</span><br><span class=\"line\">    # print(&#x27;b=&#x27;,b)</span><br><span class=\"line\">    # print(&#x27;p=&#x27;,p)</span><br><span class=\"line\">    # print(&#x27;q=&#x27;,q)</span><br><span class=\"line\">    # print(&#x27;pq=&#x27;,p*q)</span><br><span class=\"line\">    return p, q</span><br><span class=\"line\">fermat(n)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4分解出来后用脚本解密即可\"><a class=\"markdownIt-Anchor\" href=\"#4分解出来后用脚本解密即可\">#</a> 4. 分解出来后，用脚本解密即可</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import gmpy2</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">p=</span><br><span class=\"line\">q=</span><br><span class=\"line\">e=</span><br><span class=\"line\">c=</span><br><span class=\"line\"></span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\"></span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">#d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">d=gmpy2.invert(e,phi_n)</span><br><span class=\"line\"></span><br><span class=\"line\">m=pow(c,d,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode())</span><br></pre></td></tr></table></figure>\n<h4 id=\"出题脚本-2\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-2\">#</a> 出题脚本</h4>\n<p>p,q 接近，很快就能分解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">#下一个素数</span><br><span class=\"line\">q=gmpy2.next_prime(p)</span><br><span class=\"line\">print(p)</span><br><span class=\"line\">print(q)</span><br><span class=\"line\">print(gmpy2.is_prime(q))</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">m=&quot;flag&#123;20d6e2da95dcc1fa5f5432a436c4be18&#125;&quot;</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;n=&quot;,n)</span><br><span class=\"line\">print (&quot;e=&quot;,e)</span><br><span class=\"line\">print (&quot;c=&quot;,c)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/afe1675f01cc159684046592319c16cdb6cdda0b.png%401256w_160h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"解题脚本\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import  gmpy2</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">def isqrt(n):</span><br><span class=\"line\">  x = n</span><br><span class=\"line\">  y = (x + n // x) // 2</span><br><span class=\"line\">  while y &lt; x:</span><br><span class=\"line\">    x = y</span><br><span class=\"line\">    y = (x + n // x) // 2</span><br><span class=\"line\">  return x</span><br><span class=\"line\"></span><br><span class=\"line\">def fermat(n, verbose=True):</span><br><span class=\"line\">    a = isqrt(n) # int(ceil(n**0.5))</span><br><span class=\"line\">    b2 = a*a - n</span><br><span class=\"line\">    b = isqrt(n) # int(b2**0.5)</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    while b*b != b2:</span><br><span class=\"line\"></span><br><span class=\"line\">        # if verbose:</span><br><span class=\"line\"></span><br><span class=\"line\">        #     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span><br><span class=\"line\"></span><br><span class=\"line\">​        a = a + 1</span><br><span class=\"line\">​        b2 = a*a - n</span><br><span class=\"line\">​        b = isqrt(b2) # int(b2**0.5)</span><br><span class=\"line\">​        count += 1</span><br><span class=\"line\">​    p=a+b</span><br><span class=\"line\">​    q=a-b</span><br><span class=\"line\">​    assert n == p * q</span><br><span class=\"line\"></span><br><span class=\"line\">    # print(&#x27;a=&#x27;,a)</span><br><span class=\"line\"></span><br><span class=\"line\">    # print(&#x27;b=&#x27;,b)</span><br><span class=\"line\"></span><br><span class=\"line\">​    print(&#x27;p=&#x27;,p)</span><br><span class=\"line\">​    print(&#x27;q=&#x27;,q)</span><br><span class=\"line\"></span><br><span class=\"line\">    # print(&#x27;pq=&#x27;,p*q)</span><br><span class=\"line\"></span><br><span class=\"line\">​    return p, q</span><br><span class=\"line\">n= 11236396438945464079176717143196471087880430124798640194523124584883161483744355761881720924798661332027501424643154414538029585287580122761405974427818841257794157497994556608202723391478027760181705924317533420305444809223444128034654367210331137068958693840582892819495487826045956577156074156668942232139402108462349340352898572481115406698318121299787982873916502591396884489682255184448165523604671743400422220149772905676655777228607948091675612455989601008858361759327370403306760674195506394280387024357322586732298060169962426894360775981877169895632927906390632063530920611197753716095903307467004289983267</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">c= 4260482466101011731957430920901406417434306478040387371588613512063428441001754753741853444857207349755032658064826592770143368278573527632514794087007140974732031358793249329430363014561312271335226315065519570861993052432656879088776144909638480994662696119431870831156129142403063675855781198930583825083362703887688501680905266707624440432914989795886392952354713859444836529227033324455920455610359249535012999943891644938239837207994673190694512955995798836266797112432609992164908679997257920566918693544746179908166741635316261624634351348613130319346356388546672516037747806222134853885202448682842353199133</span><br><span class=\"line\">pq=fermat(n)</span><br><span class=\"line\">p=pq[0]</span><br><span class=\"line\">q=pq[1]</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">#d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">d=gmpy2.invert(e,phi_n)</span><br><span class=\"line\">m=pow(c,d,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode()) </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/b51e22de0b0d9075a9020c02e6b730570f9d9be4.png%401256w_278h_!web-article-pic.avif\" alt=\"\"></p>\n<h1 id=\"ctf-rsarsa密钥生成与读取\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsarsa密钥生成与读取\">#</a> 【CTF-RSA】RSA 密钥生成与读取</h1>\n<h2 id=\"安装pycryptodome模块\"><a class=\"markdownIt-Anchor\" href=\"#安装pycryptodome模块\">#</a> 安装 pycryptodome 模块</h2>\n<h3 id=\"公钥生成\"><a class=\"markdownIt-Anchor\" href=\"#公钥生成\">#</a> 公钥生成</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\"></span><br><span class=\"line\">p= 787228223375328491232514653709</span><br><span class=\"line\">q= 814212346998672554509751911073</span><br><span class=\"line\">n= 640970939378021470187479083920100737340912672709639557619757</span><br><span class=\"line\">d= 590103645243332826117029128695341159496883001869370080307201</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rsa_components = (n, e)</span><br><span class=\"line\">keypair = RSA.construct(rsa_components)</span><br><span class=\"line\">with open(&#x27;pubckey.pem&#x27;, &#x27;wb&#x27;) as f :</span><br><span class=\"line\">    f.write(keypair.exportKey())</span><br></pre></td></tr></table></figure>\n<h3 id=\"私钥生成\"><a class=\"markdownIt-Anchor\" href=\"#私钥生成\">#</a> 私钥生成</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\"></span><br><span class=\"line\">p= 787228223375328491232514653709</span><br><span class=\"line\">q= 814212346998672554509751911073</span><br><span class=\"line\">n= 640970939378021470187479083920100737340912672709639557619757</span><br><span class=\"line\">d= 590103645243332826117029128695341159496883001869370080307201</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rsa_components = (n,e,d,p,q)</span><br><span class=\"line\">keypair = RSA.construct(rsa_components)</span><br><span class=\"line\">with open(&#x27;private1.pem&#x27;, &#x27;wb&#x27;) as f :</span><br><span class=\"line\">    f.write(keypair.exportKey())</span><br></pre></td></tr></table></figure>\n<h3 id=\"公钥读取\"><a class=\"markdownIt-Anchor\" href=\"#公钥读取\">#</a> 公钥读取</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">with open(&quot;pubckey.pem&quot;,&quot;rb&quot;) as f:</span><br><span class=\"line\">    key = RSA.import_key(f.read())</span><br><span class=\"line\">    print(&#x27;n = %d&#x27; % key.n)</span><br><span class=\"line\">    print(&#x27;e = %d&#x27; % key.e)</span><br></pre></td></tr></table></figure>\n<h3 id=\"私钥读取\"><a class=\"markdownIt-Anchor\" href=\"#私钥读取\">#</a> 私钥读取</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">with open(&quot;private1.pem&quot;,&quot;rb&quot;) as f:</span><br><span class=\"line\">    key = RSA.import_key(f.read())</span><br><span class=\"line\">    print(&#x27;n = %d&#x27; % key.n)</span><br><span class=\"line\">    print(&#x27;e = %d&#x27; % key.e)</span><br><span class=\"line\">    print(&#x27;d = %d&#x27; % key.d)</span><br><span class=\"line\">    print(&#x27;p = %d&#x27; % key.p)</span><br><span class=\"line\">    print(&#x27;q = %d&#x27; % key.q)</span><br></pre></td></tr></table></figure>\n<h3 id=\"出题脚本-基于n分解的题目\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-基于n分解的题目\">#</a> 出题脚本 - 基于 N 分解的题目</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\"></span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">#下一个素数</span><br><span class=\"line\">q=int(gmpy2.next_prime(p))</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">m=&quot;flag&#123;a272722c1db834353ea3ce1d9c71feca&#125;&quot;</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\">flag_c=libnum.n2s(c)</span><br><span class=\"line\">rsa_components = (n, e)</span><br><span class=\"line\">keypair = RSA.construct(rsa_components)</span><br><span class=\"line\">with open(&#x27;pubckey1.pem&#x27;, &#x27;wb&#x27;) as f :</span><br><span class=\"line\">    f.write(keypair.exportKey())</span><br><span class=\"line\">with open(&quot;flag.txt&quot;,&quot;wb&quot;) as f:</span><br><span class=\"line\">    f.write(flag_c)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/335173d5bac49444e1ea16dd80a587d2e0dcbf93.png%401256w_468h_!web-article-pic.avif\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/bedadfdad9bcba50f4c7ed4dd4a96ff4811dd61b.png%401256w_192h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"解题脚本-2\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本-2\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def isqrt(n):</span><br><span class=\"line\">  x = n</span><br><span class=\"line\">  y = (x + n // x) // 2</span><br><span class=\"line\">  while y &lt; x:</span><br><span class=\"line\">    x = y</span><br><span class=\"line\">    y = (x + n // x) // 2</span><br><span class=\"line\">  return x</span><br><span class=\"line\"></span><br><span class=\"line\">def fermat(n, verbose=True):</span><br><span class=\"line\">    a = isqrt(n) # int(ceil(n**0.5))</span><br><span class=\"line\">    b2 = a*a - n</span><br><span class=\"line\">    b = isqrt(n) # int(b2**0.5)</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    while b*b != b2:</span><br><span class=\"line\">        # if verbose:</span><br><span class=\"line\">        #     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span><br><span class=\"line\">        a = a + 1</span><br><span class=\"line\">        b2 = a*a - n</span><br><span class=\"line\">        b = isqrt(b2) # int(b2**0.5)</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">    p=a+b</span><br><span class=\"line\">    q=a-b</span><br><span class=\"line\">    assert n == p * q</span><br><span class=\"line\">    # print(&#x27;a=&#x27;,a)</span><br><span class=\"line\">    # print(&#x27;b=&#x27;,b)</span><br><span class=\"line\">    # print(&#x27;p=&#x27;,p)</span><br><span class=\"line\">    # print(&#x27;q=&#x27;,q)</span><br><span class=\"line\">    # print(&#x27;pq=&#x27;,p*q)</span><br><span class=\"line\">    return p, q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">with open(&quot;pubckey1.pem&quot;,&quot;rb&quot;) as f:</span><br><span class=\"line\">    key = RSA.import_key(f.read())</span><br><span class=\"line\">    n=key.n</span><br><span class=\"line\">    e=key.e</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&quot;flag.txt&quot;,&quot;rb&quot;) as f:</span><br><span class=\"line\">    c=f.read()</span><br><span class=\"line\">    c=libnum.s2n(c)</span><br><span class=\"line\"></span><br><span class=\"line\">#费马分解,</span><br><span class=\"line\">n1=fermat(n)</span><br><span class=\"line\">p=n1[0]</span><br><span class=\"line\">q=n1[1]</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">m=pow(c,d,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode())</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/1989cf5f79a4a51208c0ba623d1290f5c9cff21c.png%40!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"进阶自动生成密钥及加解密\"><a class=\"markdownIt-Anchor\" href=\"#进阶自动生成密钥及加解密\">#</a> 进阶 —— 自动生成密钥及加解密</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Cipher import PKCS1_v1_5</span><br><span class=\"line\">from Crypto import Random</span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Cipher import PKCS1_OAEP</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">random_generator = Random.new().read</span><br><span class=\"line\">rsa = RSA.generate(2048, random_generator)</span><br><span class=\"line\"># 生成私钥</span><br><span class=\"line\">private_key = rsa.exportKey()</span><br><span class=\"line\"># print(private_key.decode(&#x27;utf-8&#x27;))</span><br><span class=\"line\">with open(&#x27;rsa_private_key.pem&#x27;, &#x27;wb&#x27;)as f:</span><br><span class=\"line\">    f.write(private_key)</span><br><span class=\"line\"># 生成公钥</span><br><span class=\"line\">public_key = rsa.publickey().exportKey()</span><br><span class=\"line\"># print(public_key.decode(&#x27;utf-8&#x27;))</span><br><span class=\"line\">with open(&#x27;rsa_public_key.pem&#x27;, &#x27;wb&#x27;)as f:</span><br><span class=\"line\">    f.write(public_key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#测试用密钥加密</span><br><span class=\"line\">public_key = RSA.importKey(public_key)</span><br><span class=\"line\">msg=&#x27;flag&#x27;</span><br><span class=\"line\">pk = PKCS1_v1_5.new(public_key)</span><br><span class=\"line\">encrypt_text = pk.encrypt(msg.encode())</span><br><span class=\"line\">print(encrypt_text)</span><br><span class=\"line\"></span><br><span class=\"line\">#测试密钥解密</span><br><span class=\"line\">private_key = RSA.importKey(private_key)</span><br><span class=\"line\">pk = PKCS1_v1_5.new(private_key)</span><br><span class=\"line\">msg = pk.decrypt(encrypt_text,0)</span><br><span class=\"line\">print(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#两种标准</span><br><span class=\"line\">rsa_components = (n, e, int(d), p, q)</span><br><span class=\"line\">arsa = RSA.construct(rsa_components)</span><br><span class=\"line\">rsakey = RSA.importKey(arsa.exportKey())</span><br><span class=\"line\">rsakey = PKCS1_OAEP.new(rsakey)</span><br><span class=\"line\">decrypted = rsakey.decrypt(c)</span><br><span class=\"line\">print(decrypted)</span><br></pre></td></tr></table></figure>\n<h1 id=\"ctf-rsa共模攻击脚本\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsa共模攻击脚本\">#</a> 【CTF-RSA】共模攻击脚本</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/ec5eb5692b3dec285a513ca7ce945dbaa4eedb00.png%401256w_354h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"出题脚本-3\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-3\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coding:utf-8</span><br><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">#生成素数</span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">q=libnum.generate_prime(1024)</span><br><span class=\"line\">e1=2333</span><br><span class=\"line\">e2=23333</span><br><span class=\"line\">m=&quot;flag&#123;6ed4c74e022cb18c8039e96de93aa9ce&#125;&quot;</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">c1=pow(m,e1,n)</span><br><span class=\"line\">c2=pow(m,e2,n)</span><br><span class=\"line\">print(&quot;n1=&quot;,n)</span><br><span class=\"line\">print(&quot;e1=&quot;,e1)</span><br><span class=\"line\">print(&quot;c1=&quot;,c1)</span><br><span class=\"line\">print(&quot;n2=&quot;,n)</span><br><span class=\"line\">print(&quot;e2=&quot;,e2)</span><br><span class=\"line\">print(&quot;c2=&quot;,c2)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/fa8f24b2218ffda191d24a04e651d113340c096e.png%401256w_370h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"解密脚本\"><a class=\"markdownIt-Anchor\" href=\"#解密脚本\">#</a> 解密脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">n= 25333966058003377512707481338795714713737652659944601834182685873529702913988641983855700459996104700470621411559153944988952210084014634675583566338568882440708528997808798650962116756969822211586531522430245040013570571043385238601846104615050089457836721437790715225367971106085839523500735480715155424498941150468093083816830215632716244390679417218873179734276657411907216486790815037105108306055794473002315541787461904728375164737225486501009857299717749346279371251245318729951905832578739696926931502225899707226264570557623527701806829827566904224572897378639191756878049342203546309520458672464170859577433</span><br><span class=\"line\">e1= 2333</span><br><span class=\"line\">c1= 11355981897781478907853356911752561659125575027336719997290835661089901154031171698660586203170528368228850895159361637188990782030255983633790580700032092629587631108597144196551438410868034739981960656110887650747325311613900008001234835897835613759692146419080113176963747835592656185435741504176116672174539018089139547795447109458469225330809064539216773123671814859510069089532677704482026169178543062578686794346026774853085101278125763460212801929360456888869350105294595904940799522522144740464043605342348269086324747729288399275079874271519208155039364092577755518532799345651172433227745483422620900776136</span><br><span class=\"line\">e2= 23333</span><br><span class=\"line\">c2= 1326499538902841116411674554069945581390130048432351353260154261863309471312810811160302458644816390944833633923435634961251092531893503039914793217247984595331920909367627316087404934402312358642315675486438968585084964845763881078835787872160374025547400141298650794551970291119975344578667689961134814676553190178139842507675899262024572370313939107080072875068218336255452161407859907308656094331557912187788276334833723893856310434523337557011032081467262457427167978528280339494077785813461280853735266463152709443731638714219391773144349752633555310299318290576258086971373777118482642702020599928071855133041</span><br><span class=\"line\"></span><br><span class=\"line\">#共模攻击</span><br><span class=\"line\">#共模攻击函数</span><br><span class=\"line\">def rsa_gong_N_def(e1,e2,c1,c2,n):</span><br><span class=\"line\">    e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n)</span><br><span class=\"line\">    s = gmpy2.gcdext(e1, e2)</span><br><span class=\"line\">    s1 = s[1]</span><br><span class=\"line\">    s2 = s[2]</span><br><span class=\"line\">    if s1 &lt; 0:</span><br><span class=\"line\">        s1 = - s1</span><br><span class=\"line\">        c1 = gmpy2.invert(c1, n)</span><br><span class=\"line\">    elif s2 &lt; 0:</span><br><span class=\"line\">        s2 = - s2</span><br><span class=\"line\">        c2 = gmpy2.invert(c2, n)</span><br><span class=\"line\">    m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n</span><br><span class=\"line\">    return int(m)</span><br><span class=\"line\">m = rsa_gong_N_def(e1,e2,c1,c2,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">print(libnum.n2s(int(m)))</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/db1d26321464b070f47f0a1977de7ecb752ae6eb.png%401256w_230h_!web-article-pic.avif\" alt=\"\"></p>\n<h3 id=\"共模攻击原理\"><a class=\"markdownIt-Anchor\" href=\"#共模攻击原理\">#</a> 共模攻击原理</h3>\n<p>两个及以上的公钥 (n,e) 来加密同一条信息 m</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1 = pow(m, e1, n)</span><br><span class=\"line\">c2 = pow(m, e2, n)</span><br></pre></td></tr></table></figure>\n<p>e1，e2 互质，则有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcd(e1,e2)=1</span><br></pre></td></tr></table></figure>\n<p>根据扩展欧几里德算法 对于不完全为 0 的整数 a，b，gcd（a，b）表示 a，b 的最大公约数。那么一定存在整数 x，y 使得 gcd（a，b）=ax+by</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e1*s1+e2*s2 = 1</span><br></pre></td></tr></table></figure>\n<p>s1、s2 皆为整数，但是一正一负，假设 s1 为正数，s2 为负数</p>\n<p>因为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1 = m^e1%n</span><br><span class=\"line\">c2 = m^e2%n</span><br></pre></td></tr></table></figure>\n<p>可得：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(c1^s1*c2^s2)%n = ((m^e1%n)^s1(m^e2%n)^s2)%n</span><br></pre></td></tr></table></figure>\n<p>根据模运算性质： 幂运算是一种关于幂的数学运算。同底数幂相乘，底数不变，指数相加。同底数幂相除，底数不变，指数相减。幂的乘方，底数不变，指数相乘。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a * b) % p = (a % p * b % p) % p</span><br><span class=\"line\">a ^ b % p = ((a % p) ^ b) % p</span><br></pre></td></tr></table></figure>\n<p>简化公式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(c1^s1*c2^s2)%n = ((m^e1%n)^s1*(m^e2%n)^s2)%n</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (c1^s1*c2^s2)%n = ((m^e1%n)^s1%n*(m^e2%n)^s2%n)%n #(a * b) % p = (a % p * b % p) % p</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (c1^s1*c2^s2)%n = ((m^e1)^s1%n*(m^e2)^s2%n)%n #((a % p) ^ b) % p =a ^ b % p</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; (c1^s1*c2^s2)%n = ((m^e1)^s1*(m^e2)^s2)%n # (a % p * b % p) % p=(a * b) % p</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;(c1^s1*c2^s2)%n = ((m^(e1*s1)*(m^(e2*s2))%n #。幂的乘方，底数不变，指数相乘。</span><br><span class=\"line\"></span><br><span class=\"line\">(c1^s1*c2^s2)%n = (m^(e1*s1+e2*s2))%n  # 同底数幂相乘，底数不变，指数相加。</span><br></pre></td></tr></table></figure>\n<p>因为 e1<em>s1+e2</em>s2 = 1 得：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(c1^s1*c2^s2)%n = (m^1)%n</span><br><span class=\"line\"></span><br><span class=\"line\">(c1^s1*c2^s2）%n=m</span><br></pre></td></tr></table></figure>\n<p>上述就是 rsa 共模攻击的过程</p>\n<p>因此，同一 m，同一 n, 不同 e，进行加密。在不需要知道 d 的情况下，可以进行解密。</p>\n<h1 id=\"ctf-rsawiener维纳攻击脚本\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsawiener维纳攻击脚本\">#</a> 【CTF-RSA】wiener (维纳) 攻击脚本</h1>\n<p>低解密指数攻击</p>\n<p>维纳攻击:e 指数很大 (理论上 d&lt;N**0.25 此攻击起作用)</p>\n<h3 id=\"出题脚本-4\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-4\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import random</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">#生成随机素数</span><br><span class=\"line\">p=libnum.generate_prime(512)</span><br><span class=\"line\">q=libnum.generate_prime(512)</span><br><span class=\"line\">m=&quot;flag&#123;20d6e2da95dcc1fa5f5432a436c4be18&#125;&quot;</span><br><span class=\"line\">#字符串转数字</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">#计算d</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    nbits=1024</span><br><span class=\"line\">    d = random.getrandbits(nbits // 4)</span><br><span class=\"line\">    if (libnum.gcd(d, phi_n) == 1 and 36 * pow(d, 4) &lt; n):</span><br><span class=\"line\">        break</span><br><span class=\"line\">#计算e</span><br><span class=\"line\">e = libnum.invmod(d,phi_n)</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\">print (&quot;n=&quot;,n)</span><br><span class=\"line\">print (&quot;e=&quot;,e)</span><br><span class=\"line\">print (&quot;c=&quot;,c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">n=102099548361332638344237630396918304669480123432427691789000801421929226904417516565900645418525797159668929644513100700481417366819546101164265596706858513650095068198188946822981224172023933260431303286767867370050964230357219983386055508144712031982008096516285393789767140630413556460318866725444111200943</span><br><span class=\"line\">e=94994203498929475603874878316562406769119091464658088508285677241091060748158032542307067657105896639464248805968843801720116349229945077164078734338861088173913967531166751856585737460477446495550234322955763049253862441121077805134024431490817802775319606751537898284798700294616843500662903168724602836801</span><br><span class=\"line\">c=81573644335666712672791855949066359386986007425938431546920059710780388358488503125182517117627957949413515274338734396361948242477931901530434398164748401317943265396004901457700820503669867532428599683112699749720514979210181537932231600377359054106599204293139340781914077341382222025122079086888130243607</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题脚本-3\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本-3\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import gmpy2</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">def continuedFra(x, y):</span><br><span class=\"line\">    &quot;&quot;&quot;计算连分数</span><br><span class=\"line\">    :param x: 分子</span><br><span class=\"line\">    :param y: 分母</span><br><span class=\"line\">    :return: 连分数列表</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    while y:</span><br><span class=\"line\">        cf.append(x // y)</span><br><span class=\"line\">        x, y = y, x % y</span><br><span class=\"line\">    return cf</span><br><span class=\"line\">def gradualFra(cf):</span><br><span class=\"line\">    &quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class=\"line\">    :param cf: 连分数列表</span><br><span class=\"line\">    :return: 该列表最后的渐近分数</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    numerator = 0</span><br><span class=\"line\">    denominator = 1</span><br><span class=\"line\">    for x in cf[::-1]:</span><br><span class=\"line\">        # 这里的渐进分数分子分母要分开</span><br><span class=\"line\">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class=\"line\">    return numerator, denominator</span><br><span class=\"line\">def solve_pq(a, b, c):</span><br><span class=\"line\">    &quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class=\"line\">    :param a:x^2的系数</span><br><span class=\"line\">    :param b:x的系数</span><br><span class=\"line\">    :param c:pq</span><br><span class=\"line\">    :return:p，q</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    par = gmpy2.isqrt(b * b - 4 * a * c)</span><br><span class=\"line\">    return (-b + par) // (2 * a), (-b - par) // (2 * a)</span><br><span class=\"line\">def getGradualFra(cf):</span><br><span class=\"line\">    &quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class=\"line\">    :param cf: 连分数列表</span><br><span class=\"line\">    :return: 该列表所有的渐近分数</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    gf = []</span><br><span class=\"line\">    for i in range(1, len(cf) + 1):</span><br><span class=\"line\">        gf.append(gradualFra(cf[:i]))</span><br><span class=\"line\">    return gf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def wienerAttack(e, n):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    :param e:</span><br><span class=\"line\">    :param n:</span><br><span class=\"line\">    :return: 私钥d</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    cf = continuedFra(e, n)</span><br><span class=\"line\">    gf = getGradualFra(cf)</span><br><span class=\"line\">    for d, k in gf:</span><br><span class=\"line\">        if k == 0: continue</span><br><span class=\"line\">        if (e * d - 1) % k != 0:</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        phi = (e * d - 1) // k</span><br><span class=\"line\">        p, q = solve_pq(1, n - phi + 1, n)</span><br><span class=\"line\">        if p * q == n:</span><br><span class=\"line\">            return d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">n=102099548361332638344237630396918304669480123432427691789000801421929226904417516565900645418525797159668929644513100700481417366819546101164265596706858513650095068198188946822981224172023933260431303286767867370050964230357219983386055508144712031982008096516285393789767140630413556460318866725444111200943</span><br><span class=\"line\">e=94994203498929475603874878316562406769119091464658088508285677241091060748158032542307067657105896639464248805968843801720116349229945077164078734338861088173913967531166751856585737460477446495550234322955763049253862441121077805134024431490817802775319606751537898284798700294616843500662903168724602836801</span><br><span class=\"line\">c=81573644335666712672791855949066359386986007425938431546920059710780388358488503125182517117627957949413515274338734396361948242477931901530434398164748401317943265396004901457700820503669867532428599683112699749720514979210181537932231600377359054106599204293139340781914077341382222025122079086888130243607</span><br><span class=\"line\"></span><br><span class=\"line\">d=wienerAttack(e, n)</span><br><span class=\"line\">m=pow(c, d, n)</span><br><span class=\"line\">print(libnum.n2s(m).decode())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;20d6e2da95dcc1fa5f5432a436c4be18&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"ctf-rsa低加密指数攻击\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsa低加密指数攻击\">#</a> 【CTF-RSA】低加密指数攻击</h1>\n<p>加密指数指的是 e，e 一般选取 65535，当 e 很小，可直接破解。</p>\n<p>这类攻击在 CTF 题中，一般是 e=3</p>\n<p>如果 e = 3，且 m^e &lt; n，c 开 3 次根式，得到 m。</p>\n<p>如果 e = 3 ，且 m^e &gt; n，那么设 k，有:c = m^e +kn</p>\n<p>爆破 k，如果 c - kn 能开三次根式，得到 m。</p>\n<h3 id=\"出题脚本-5\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-5\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\">#生成随机素数</span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">q=libnum.generate_prime(1024)</span><br><span class=\"line\">e=3</span><br><span class=\"line\">m=&quot;flag&#123;20d6e2da95dcc1fa5f5432a436c4be18&#125;&quot;</span><br><span class=\"line\">#字符串转数字</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">d=gmpy2.invert(e,phi_n)</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\"></span><br><span class=\"line\">print (&quot;n=&quot;,n)</span><br><span class=\"line\">print (&quot;e=&quot;,e)</span><br><span class=\"line\">print (&quot;c=&quot;,c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=18361906160620022464979295059548883385156763943394380833201208639301999608709114912270056929331270217554369812335058385974338512141859324983921470930958736360738390027166728364010907401951540109944793784157080984583656592972723810889149243441868648226149805798535282656161928879613643809863794073478884041202910160124060619201573772596307101846646211547036087826821419144901484859844669828292496176238256415692144872092048438977709004772671999206253947138558324768798764429817036656232137523183071900974937071243387207692734022115048640542690719058701296145264383203094482976978127329751006501499156643644516658977039</span><br><span class=\"line\">e= 3</span><br><span class=\"line\">c=2217344750798294937344050117513831761010547351781457575945714176628679412650463329423466955026804439931765627111856888102133234836914006818023839994342283023142702993182665344445325734299047409223354338948863171846780674244925724334091153701697864918695050507247415283070309</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题脚本-4\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本-4\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import gmpy2</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">def de(c, e, n):</span><br><span class=\"line\">    k = 0</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        mm = c + n*k</span><br><span class=\"line\">        result, flag = gmpy2.iroot(mm, e)</span><br><span class=\"line\">        if True == flag:</span><br><span class=\"line\">            return result</span><br><span class=\"line\">        k += 1</span><br><span class=\"line\">n=18361906160620022464979295059548883385156763943394380833201208639301999608709114912270056929331270217554369812335058385974338512141859324983921470930958736360738390027166728364010907401951540109944793784157080984583656592972723810889149243441868648226149805798535282656161928879613643809863794073478884041202910160124060619201573772596307101846646211547036087826821419144901484859844669828292496176238256415692144872092048438977709004772671999206253947138558324768798764429817036656232137523183071900974937071243387207692734022115048640542690719058701296145264383203094482976978127329751006501499156643644516658977039</span><br><span class=\"line\">e= 3</span><br><span class=\"line\">c=2217344750798294937344050117513831761010547351781457575945714176628679412650463329423466955026804439931765627111856888102133234836914006818023839994342283023142702993182665344445325734299047409223354338948863171846780674244925724334091153701697864918695050507247415283070309</span><br><span class=\"line\"></span><br><span class=\"line\">m=de(c,e,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;20d6e2da95dcc1fa5f5432a436c4be18&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"ctf-rsa低加密指数广播攻击\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsa低加密指数广播攻击\">#</a> 【CTF-RSA】低加密指数广播攻击</h1>\n<p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信 息，那么可以进行广播攻击得到明文。</p>\n<p>在 CTF 中，n、 c 不同，明文 m， e 相同，其 e 比较小。使用中国剩余定理求解</p>\n<h3 id=\"出题脚本-6\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-6\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">#生成随机素数</span><br><span class=\"line\">def rsa_def(e,m):</span><br><span class=\"line\">    p=libnum.generate_prime(1024)</span><br><span class=\"line\">    q=libnum.generate_prime(1024)</span><br><span class=\"line\">    #字符串转数字</span><br><span class=\"line\">    m=libnum.s2n(m)</span><br><span class=\"line\">    n=p*q</span><br><span class=\"line\">    c=pow(m,e,n)</span><br><span class=\"line\">    n_lt.append(n)</span><br><span class=\"line\">    c_lt.append(c)</span><br><span class=\"line\"></span><br><span class=\"line\">n_lt=[]</span><br><span class=\"line\">c_lt=[]</span><br><span class=\"line\">e=23</span><br><span class=\"line\">m=&#x27;flag&#123;2cb2eb4b2c7fdf4e94e10344be856446&#125;&#x27;</span><br><span class=\"line\">for i in range(7):</span><br><span class=\"line\">    rsa_def(e,m)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;e=&quot;,e)</span><br><span class=\"line\">print(&quot;n=&quot;,n_lt)</span><br><span class=\"line\">print(&quot;c=&quot;,c_lt)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e= 23</span><br><span class=\"line\">n= [28303622412582000131021407474534006627921799223355183106077505407831206380301837802779082885240206111505508547474437431362756095431762358110052438004267595363538307523189378160064363522004491855944919119597205658182749902342637937883927268605382518011199700158912849626569207674748509433787195694903010718581029837747981171596866887181030964844788562253129379797530253580033726662830283337751897717068387389316332038495989183875297434865972913656079980895151344185488446963115671720552088880147981915346363110130965930170755630143071342168860938247998306451689613273637151748431977358920444034764161368269864228260683, 20251452587759389751052720079014998244267616359016633593589175521621218456216360455295414295294412150809772398298894292213274346026242406070081445287045202845357692424984414731052455823237307016241779223277378745608301817094614950269964820345061379221697200410141112889155488951350825981000289053073683521941913801494200697246114178401082071562438086829634844209636507018099598320310860622688713956769159252262767722969006737392560062259268529057175218726693282184813651015664791336482617886917300606453413316038320561235717486917130822910721442930492265275565223486795987687552720234029811300311632264662984617939923, 14346699094920477306010014637065577396695146335017849885453710192053891302468843510448258124074965535071629427969248410027905493732280558837459311032388092215070142163153478283674348594955980639353521355441745601559314424603582895058504836475536927137989360726605508903641768784888818544654282487163986929656604018129571142512687134510041787214732147219138074791325301979785700412656267988690767850022868346773574953938614889361051066241822201821473385327983954592011097734422105185886881113996631236580465724811634148336929200213266140831603665217513011608681717494792540922272443225320166269546005384086341666270237, 20666343363156785654985613960098447088558685398640350288254320340496666688516590319064027915211047314924250684432033752242942966685842979794980296365888247039788491929724979065867747495180389495328018143172137761614969040970809046901475911809919819225814792921474015886234384233024615479366352095594442693243266913593735671556255730133253641239650968425165554567952946701451909296290474332348774876523488586367522569297383954521921027624472179940907798879661735838019525520096563628175856915838339369924996762439573028482405388108352766763640977505904313025884575825285855552752229632152736769500408011313183214392153, 14480286280129696514270349363639135690194813767915498959160314284345452109136054438918279879687988685577041179672481826413238969577366809496037008028319471115982075204004599853880859319285735251215720017350744902158301356474516391525891691871856049412845949704986820012935591952822443217869963788393612548023802605993419800696221415244404127247038175359086885939193086585037732169908522678773825469337954376145864799261157893957600692457882657459928699280090202008141189229552755119857595139897657107729811724161618369203527263317202234130089849201954557040754721260368951656599885121453704835178188315313686147051923, 25135420084057729138962207770153147249216029716010916549133072798022173651499205043606282483768583672328760981332426505696227594660119754631421070583142367295963352819026044721993905256646249896759721623276462449809859752925530184188042885144607718530989588516038414786694143648547597489366540402541899809051752326713817126431123487448396593702877775626937606471335455786422703851710737764866288332272933341502968739417462132708542330342772267969202023083086220041463278283077205795088208728884309357563743034975287256152505174426461145926368526423625546487258149118398734494641732919040020011403436393212191779432673, 14170383666109427589521313589398954693073999267690679429232942135812456809241794890000695435122337549594511547359442056505587452722540626257265898140591417773350910678019484155053006149919493857135172612823857432437751164396086806969247887722030626100150488635591461262100283389559941169785826738781070083631000931652943447440214092308220562550698836331050228146220398533720225203000322816574801344359625600962347408643059867457659818853613771081585704280121043234667995329377274986249499236061703041940482592689369088929027039513948760377275611911167035304174744652049727637136905531242917152702461696223811033602849]</span><br><span class=\"line\">c= [15173807047472256447845684717251358912200122697842932385546098349809093752333910920794395969740005443648644569649151629387591807920298558650496538425219132987551223405408877632454158688064537658192460658356150057322506966948335987016028449001715452265499461776374053182409407643957629092529093158637338071846233068554991170358967852459399326506707061476129428800423426317404552334777482684000352415432732181431121500596157289667232882302431654245553236480148739150161235082097663476820421720676277364383804753596422154646210167713035821889664523396840593631837829893992707455057905959892044493550616949765027220821785, 11938220729710468926557967838524738768470825644612868603230757095292323093455865828959914062879644655551785832471143737493581841344185257107375234777532911128608967712481626952843271008996247807352342523498164298300504938844670197912254303803381691946636195711489073144969303997622633132286422880867271226194190255544078235550661988616892022747818310141637456428313681765661471975562221216381338670295432045738683059404018667138703833764008763778236536867798296840402557891175517847355068530786232834297244608865178392836134797580251614936231688236439984467175534272554294756436715223184842969069377142090754306086587, 8372259615196673779309934993544198416663757780787798713946610637626427463845006237283078696569258480955022027747227029707234987550305246888247136777153012680650117836880636761607863194764822189962747464025510178303075209848879650377247816192817842261342129001268715009974847247605278255193595427547890570752506772700910884836219465705104991007024562594310924752843471782461218371258698746171751166701903238716161531339945132602715536032022798223230723435175807913796348676823846038302524566716088962679362404006745480422576452325081934683229769895346449322176285464821570547521826791307002350786334042239662645563957, 5733976274584604503158989659243088656260484646101064598377820249243214941836104198790082691176209885137416348787627889019963374849716526301643203575745466143947067545186455524140490976182048095864032981061075827442834540637189552464126900919432241265888539704207825612690608583372413157779228956416948469330266827436190056447128563728081276323274058344982585240713393646248729347606147217955847165489399173144936327439947001621504890772515826043945534422085396820828587397025376566166372721369230275346318899064967181577034570239626240177509679081760324839630754365907895622832683887937718999018391437954527915504901, 11962620418277676374646808244354446889608161479405151063272409866849868879538467999438518866434088322058589141374532978662604437111947985330191441627067325730811388148805199455276493437021336994786423781063493329839484836248757775950256990830760793068417392697398710960950052662407124826751941922179917894234165713413459177376070935878803205790872796797683585051588692549376205056943215230738458048997617777633513907061623849828839043504459133638367820741574829044986070351587722416355383246077069665269193960717664499012759258851692437332541468322361668893398759490048718179565240789060484618800904819752877790839865, 14514190627252965989458912133650177358276024599448353767974956651001711285954527380677271379264744774560583389294677415329151572066496871191623403237537474484131590211694780397994927633637859321564626876861928816731833317835860346102068049048681141741602880112650970773766475860379331822623866557451204868940771037743371956603238411685645585455864559001752753943194800979965196045576484095541094062989278859774751950753918707697030394009501569165004933027458740532191312977538863175872726905565882031876620249853780381000852597492112187214600432630583588524386583025190254266601054787278440312207823089175947291805412, 7170711933239761804272372742798978256972824803609483931621008487728643522487624210005513129465353379861752443367806850891359310644714068239910036947843884154622114312629119056999639223587198702912932135706473355115493813596396494080029186640406895454294620829968679709936590321511385222821447179694303480562868112280011278299778419343863090503526288120666396481735329192528853631884136207219752754405396833982641885684715010162118882211883389908927141918526128685468851895086930506025457622185661218790174083864969366351390048046735613504180183923456680037579550089548742296821712544283816875194625748204510190006748]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解密脚本-2\"><a class=\"markdownIt-Anchor\" href=\"#解密脚本-2\">#</a> 解密脚本</h3>\n<h4 id=\"解密脚本1\"><a class=\"markdownIt-Anchor\" href=\"#解密脚本1\">#</a> 解密脚本 1</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">from gmpy2 import invert, gcd, iroot</span><br><span class=\"line\"></span><br><span class=\"line\">def op(x):</span><br><span class=\"line\">    res = 1</span><br><span class=\"line\">    for i in x:</span><br><span class=\"line\">        res *= i</span><br><span class=\"line\">    return res</span><br><span class=\"line\"></span><br><span class=\"line\">def CRT(m, a):</span><br><span class=\"line\">    assert (len(m) == len(a))</span><br><span class=\"line\">    M = op(m)</span><br><span class=\"line\">    sum = 0</span><br><span class=\"line\">    for m, a in zip(m, a):</span><br><span class=\"line\">        Mi = M // m</span><br><span class=\"line\">        ti = invert(Mi, m)</span><br><span class=\"line\">        sum += a * ti * Mi</span><br><span class=\"line\">    return sum % M</span><br><span class=\"line\">def GCRT(m, a):</span><br><span class=\"line\">    assert (len(m) == len(a))</span><br><span class=\"line\">    curm, cura = m[0], a[0]</span><br><span class=\"line\">    for m, a in zip(m[1:], a[1:]):</span><br><span class=\"line\">        d = gcd(curm, m)</span><br><span class=\"line\">        c = a - cura</span><br><span class=\"line\">        assert (c % d == 0)</span><br><span class=\"line\">        K = c // d * invert(curm // d, m // d)</span><br><span class=\"line\">        cura += curm * K</span><br><span class=\"line\">        curm = curm * m // d</span><br><span class=\"line\">    return cura % curm</span><br><span class=\"line\"></span><br><span class=\"line\">e= 23</span><br><span class=\"line\">n= [28303622412582000131021407474534006627921799223355183106077505407831206380301837802779082885240206111505508547474437431362756095431762358110052438004267595363538307523189378160064363522004491855944919119597205658182749902342637937883927268605382518011199700158912849626569207674748509433787195694903010718581029837747981171596866887181030964844788562253129379797530253580033726662830283337751897717068387389316332038495989183875297434865972913656079980895151344185488446963115671720552088880147981915346363110130965930170755630143071342168860938247998306451689613273637151748431977358920444034764161368269864228260683, 20251452587759389751052720079014998244267616359016633593589175521621218456216360455295414295294412150809772398298894292213274346026242406070081445287045202845357692424984414731052455823237307016241779223277378745608301817094614950269964820345061379221697200410141112889155488951350825981000289053073683521941913801494200697246114178401082071562438086829634844209636507018099598320310860622688713956769159252262767722969006737392560062259268529057175218726693282184813651015664791336482617886917300606453413316038320561235717486917130822910721442930492265275565223486795987687552720234029811300311632264662984617939923, 14346699094920477306010014637065577396695146335017849885453710192053891302468843510448258124074965535071629427969248410027905493732280558837459311032388092215070142163153478283674348594955980639353521355441745601559314424603582895058504836475536927137989360726605508903641768784888818544654282487163986929656604018129571142512687134510041787214732147219138074791325301979785700412656267988690767850022868346773574953938614889361051066241822201821473385327983954592011097734422105185886881113996631236580465724811634148336929200213266140831603665217513011608681717494792540922272443225320166269546005384086341666270237, 20666343363156785654985613960098447088558685398640350288254320340496666688516590319064027915211047314924250684432033752242942966685842979794980296365888247039788491929724979065867747495180389495328018143172137761614969040970809046901475911809919819225814792921474015886234384233024615479366352095594442693243266913593735671556255730133253641239650968425165554567952946701451909296290474332348774876523488586367522569297383954521921027624472179940907798879661735838019525520096563628175856915838339369924996762439573028482405388108352766763640977505904313025884575825285855552752229632152736769500408011313183214392153, 14480286280129696514270349363639135690194813767915498959160314284345452109136054438918279879687988685577041179672481826413238969577366809496037008028319471115982075204004599853880859319285735251215720017350744902158301356474516391525891691871856049412845949704986820012935591952822443217869963788393612548023802605993419800696221415244404127247038175359086885939193086585037732169908522678773825469337954376145864799261157893957600692457882657459928699280090202008141189229552755119857595139897657107729811724161618369203527263317202234130089849201954557040754721260368951656599885121453704835178188315313686147051923, 25135420084057729138962207770153147249216029716010916549133072798022173651499205043606282483768583672328760981332426505696227594660119754631421070583142367295963352819026044721993905256646249896759721623276462449809859752925530184188042885144607718530989588516038414786694143648547597489366540402541899809051752326713817126431123487448396593702877775626937606471335455786422703851710737764866288332272933341502968739417462132708542330342772267969202023083086220041463278283077205795088208728884309357563743034975287256152505174426461145926368526423625546487258149118398734494641732919040020011403436393212191779432673, 14170383666109427589521313589398954693073999267690679429232942135812456809241794890000695435122337549594511547359442056505587452722540626257265898140591417773350910678019484155053006149919493857135172612823857432437751164396086806969247887722030626100150488635591461262100283389559941169785826738781070083631000931652943447440214092308220562550698836331050228146220398533720225203000322816574801344359625600962347408643059867457659818853613771081585704280121043234667995329377274986249499236061703041940482592689369088929027039513948760377275611911167035304174744652049727637136905531242917152702461696223811033602849]</span><br><span class=\"line\">c= [15173807047472256447845684717251358912200122697842932385546098349809093752333910920794395969740005443648644569649151629387591807920298558650496538425219132987551223405408877632454158688064537658192460658356150057322506966948335987016028449001715452265499461776374053182409407643957629092529093158637338071846233068554991170358967852459399326506707061476129428800423426317404552334777482684000352415432732181431121500596157289667232882302431654245553236480148739150161235082097663476820421720676277364383804753596422154646210167713035821889664523396840593631837829893992707455057905959892044493550616949765027220821785, 11938220729710468926557967838524738768470825644612868603230757095292323093455865828959914062879644655551785832471143737493581841344185257107375234777532911128608967712481626952843271008996247807352342523498164298300504938844670197912254303803381691946636195711489073144969303997622633132286422880867271226194190255544078235550661988616892022747818310141637456428313681765661471975562221216381338670295432045738683059404018667138703833764008763778236536867798296840402557891175517847355068530786232834297244608865178392836134797580251614936231688236439984467175534272554294756436715223184842969069377142090754306086587, 8372259615196673779309934993544198416663757780787798713946610637626427463845006237283078696569258480955022027747227029707234987550305246888247136777153012680650117836880636761607863194764822189962747464025510178303075209848879650377247816192817842261342129001268715009974847247605278255193595427547890570752506772700910884836219465705104991007024562594310924752843471782461218371258698746171751166701903238716161531339945132602715536032022798223230723435175807913796348676823846038302524566716088962679362404006745480422576452325081934683229769895346449322176285464821570547521826791307002350786334042239662645563957, 5733976274584604503158989659243088656260484646101064598377820249243214941836104198790082691176209885137416348787627889019963374849716526301643203575745466143947067545186455524140490976182048095864032981061075827442834540637189552464126900919432241265888539704207825612690608583372413157779228956416948469330266827436190056447128563728081276323274058344982585240713393646248729347606147217955847165489399173144936327439947001621504890772515826043945534422085396820828587397025376566166372721369230275346318899064967181577034570239626240177509679081760324839630754365907895622832683887937718999018391437954527915504901, 11962620418277676374646808244354446889608161479405151063272409866849868879538467999438518866434088322058589141374532978662604437111947985330191441627067325730811388148805199455276493437021336994786423781063493329839484836248757775950256990830760793068417392697398710960950052662407124826751941922179917894234165713413459177376070935878803205790872796797683585051588692549376205056943215230738458048997617777633513907061623849828839043504459133638367820741574829044986070351587722416355383246077069665269193960717664499012759258851692437332541468322361668893398759490048718179565240789060484618800904819752877790839865, 14514190627252965989458912133650177358276024599448353767974956651001711285954527380677271379264744774560583389294677415329151572066496871191623403237537474484131590211694780397994927633637859321564626876861928816731833317835860346102068049048681141741602880112650970773766475860379331822623866557451204868940771037743371956603238411685645585455864559001752753943194800979965196045576484095541094062989278859774751950753918707697030394009501569165004933027458740532191312977538863175872726905565882031876620249853780381000852597492112187214600432630583588524386583025190254266601054787278440312207823089175947291805412, 7170711933239761804272372742798978256972824803609483931621008487728643522487624210005513129465353379861752443367806850891359310644714068239910036947843884154622114312629119056999639223587198702912932135706473355115493813596396494080029186640406895454294620829968679709936590321511385222821447179694303480562868112280011278299778419343863090503526288120666396481735329192528853631884136207219752754405396833982641885684715010162118882211883389908927141918526128685468851895086930506025457622185661218790174083864969366351390048046735613504180183923456680037579550089548742296821712544283816875194625748204510190006748]</span><br><span class=\"line\">m = CRT(n, c)</span><br><span class=\"line\">m1 = iroot(m, e)  # 开e次方</span><br><span class=\"line\">print(m1)</span><br><span class=\"line\">print(libnum.n2s(int(m1[0])))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(mpz(13040004482819734622317003488996400249726426925342964419221160229528546987125461670186727037), True)</span><br><span class=\"line\">b&#x27;flag&#123;2cb2eb4b2c7fdf4e94e10344be856446&#125;&#x27;</span><br></pre></td></tr></table></figure>\n<h4 id=\"阶梯脚本2\"><a class=\"markdownIt-Anchor\" href=\"#阶梯脚本2\">#</a> 阶梯脚本 2</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import binascii,gmpy2</span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\"></span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def CRT(mi, ai):</span><br><span class=\"line\">    assert(reduce(gmpy2.gcd,mi)==1)</span><br><span class=\"line\">    assert (isinstance(mi, list) and isinstance(ai, list))</span><br><span class=\"line\">    M = reduce(lambda x, y: x * y, mi)</span><br><span class=\"line\">    ai_ti_Mi = [a * (M // m) * gmpy2.invert(M // m, m) for (m, a) in zip(mi, ai)]</span><br><span class=\"line\">    return reduce(lambda x, y: x + y, ai_ti_Mi) % M</span><br><span class=\"line\"></span><br><span class=\"line\">e= 23</span><br><span class=\"line\">n= [28303622412582000131021407474534006627921799223355183106077505407831206380301837802779082885240206111505508547474437431362756095431762358110052438004267595363538307523189378160064363522004491855944919119597205658182749902342637937883927268605382518011199700158912849626569207674748509433787195694903010718581029837747981171596866887181030964844788562253129379797530253580033726662830283337751897717068387389316332038495989183875297434865972913656079980895151344185488446963115671720552088880147981915346363110130965930170755630143071342168860938247998306451689613273637151748431977358920444034764161368269864228260683, 20251452587759389751052720079014998244267616359016633593589175521621218456216360455295414295294412150809772398298894292213274346026242406070081445287045202845357692424984414731052455823237307016241779223277378745608301817094614950269964820345061379221697200410141112889155488951350825981000289053073683521941913801494200697246114178401082071562438086829634844209636507018099598320310860622688713956769159252262767722969006737392560062259268529057175218726693282184813651015664791336482617886917300606453413316038320561235717486917130822910721442930492265275565223486795987687552720234029811300311632264662984617939923, 14346699094920477306010014637065577396695146335017849885453710192053891302468843510448258124074965535071629427969248410027905493732280558837459311032388092215070142163153478283674348594955980639353521355441745601559314424603582895058504836475536927137989360726605508903641768784888818544654282487163986929656604018129571142512687134510041787214732147219138074791325301979785700412656267988690767850022868346773574953938614889361051066241822201821473385327983954592011097734422105185886881113996631236580465724811634148336929200213266140831603665217513011608681717494792540922272443225320166269546005384086341666270237, 20666343363156785654985613960098447088558685398640350288254320340496666688516590319064027915211047314924250684432033752242942966685842979794980296365888247039788491929724979065867747495180389495328018143172137761614969040970809046901475911809919819225814792921474015886234384233024615479366352095594442693243266913593735671556255730133253641239650968425165554567952946701451909296290474332348774876523488586367522569297383954521921027624472179940907798879661735838019525520096563628175856915838339369924996762439573028482405388108352766763640977505904313025884575825285855552752229632152736769500408011313183214392153, 14480286280129696514270349363639135690194813767915498959160314284345452109136054438918279879687988685577041179672481826413238969577366809496037008028319471115982075204004599853880859319285735251215720017350744902158301356474516391525891691871856049412845949704986820012935591952822443217869963788393612548023802605993419800696221415244404127247038175359086885939193086585037732169908522678773825469337954376145864799261157893957600692457882657459928699280090202008141189229552755119857595139897657107729811724161618369203527263317202234130089849201954557040754721260368951656599885121453704835178188315313686147051923, 25135420084057729138962207770153147249216029716010916549133072798022173651499205043606282483768583672328760981332426505696227594660119754631421070583142367295963352819026044721993905256646249896759721623276462449809859752925530184188042885144607718530989588516038414786694143648547597489366540402541899809051752326713817126431123487448396593702877775626937606471335455786422703851710737764866288332272933341502968739417462132708542330342772267969202023083086220041463278283077205795088208728884309357563743034975287256152505174426461145926368526423625546487258149118398734494641732919040020011403436393212191779432673, 14170383666109427589521313589398954693073999267690679429232942135812456809241794890000695435122337549594511547359442056505587452722540626257265898140591417773350910678019484155053006149919493857135172612823857432437751164396086806969247887722030626100150488635591461262100283389559941169785826738781070083631000931652943447440214092308220562550698836331050228146220398533720225203000322816574801344359625600962347408643059867457659818853613771081585704280121043234667995329377274986249499236061703041940482592689369088929027039513948760377275611911167035304174744652049727637136905531242917152702461696223811033602849]</span><br><span class=\"line\">c= [15173807047472256447845684717251358912200122697842932385546098349809093752333910920794395969740005443648644569649151629387591807920298558650496538425219132987551223405408877632454158688064537658192460658356150057322506966948335987016028449001715452265499461776374053182409407643957629092529093158637338071846233068554991170358967852459399326506707061476129428800423426317404552334777482684000352415432732181431121500596157289667232882302431654245553236480148739150161235082097663476820421720676277364383804753596422154646210167713035821889664523396840593631837829893992707455057905959892044493550616949765027220821785, 11938220729710468926557967838524738768470825644612868603230757095292323093455865828959914062879644655551785832471143737493581841344185257107375234777532911128608967712481626952843271008996247807352342523498164298300504938844670197912254303803381691946636195711489073144969303997622633132286422880867271226194190255544078235550661988616892022747818310141637456428313681765661471975562221216381338670295432045738683059404018667138703833764008763778236536867798296840402557891175517847355068530786232834297244608865178392836134797580251614936231688236439984467175534272554294756436715223184842969069377142090754306086587, 8372259615196673779309934993544198416663757780787798713946610637626427463845006237283078696569258480955022027747227029707234987550305246888247136777153012680650117836880636761607863194764822189962747464025510178303075209848879650377247816192817842261342129001268715009974847247605278255193595427547890570752506772700910884836219465705104991007024562594310924752843471782461218371258698746171751166701903238716161531339945132602715536032022798223230723435175807913796348676823846038302524566716088962679362404006745480422576452325081934683229769895346449322176285464821570547521826791307002350786334042239662645563957, 5733976274584604503158989659243088656260484646101064598377820249243214941836104198790082691176209885137416348787627889019963374849716526301643203575745466143947067545186455524140490976182048095864032981061075827442834540637189552464126900919432241265888539704207825612690608583372413157779228956416948469330266827436190056447128563728081276323274058344982585240713393646248729347606147217955847165489399173144936327439947001621504890772515826043945534422085396820828587397025376566166372721369230275346318899064967181577034570239626240177509679081760324839630754365907895622832683887937718999018391437954527915504901, 11962620418277676374646808244354446889608161479405151063272409866849868879538467999438518866434088322058589141374532978662604437111947985330191441627067325730811388148805199455276493437021336994786423781063493329839484836248757775950256990830760793068417392697398710960950052662407124826751941922179917894234165713413459177376070935878803205790872796797683585051588692549376205056943215230738458048997617777633513907061623849828839043504459133638367820741574829044986070351587722416355383246077069665269193960717664499012759258851692437332541468322361668893398759490048718179565240789060484618800904819752877790839865, 14514190627252965989458912133650177358276024599448353767974956651001711285954527380677271379264744774560583389294677415329151572066496871191623403237537474484131590211694780397994927633637859321564626876861928816731833317835860346102068049048681141741602880112650970773766475860379331822623866557451204868940771037743371956603238411685645585455864559001752753943194800979965196045576484095541094062989278859774751950753918707697030394009501569165004933027458740532191312977538863175872726905565882031876620249853780381000852597492112187214600432630583588524386583025190254266601054787278440312207823089175947291805412, 7170711933239761804272372742798978256972824803609483931621008487728643522487624210005513129465353379861752443367806850891359310644714068239910036947843884154622114312629119056999639223587198702912932135706473355115493813596396494080029186640406895454294620829968679709936590321511385222821447179694303480562868112280011278299778419343863090503526288120666396481735329192528853631884136207219752754405396833982641885684715010162118882211883389908927141918526128685468851895086930506025457622185661218790174083864969366351390048046735613504180183923456680037579550089548742296821712544283816875194625748204510190006748]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">m=gmpy2.iroot(CRT(n, c), e)[0]</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">print(libnum.n2s(int(m)))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13040004482819734622317003488996400249726426925342964419221160229528546987125461670186727037</span><br><span class=\"line\">b&#x27;flag&#123;2cb2eb4b2c7fdf4e94e10344be856446&#125;&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"ctf-rsan不互素共享素数\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsan不互素共享素数\">#</a> 【CTF-RSA】N 不互素（共享素数）</h1>\n<p>两个 n 里使用有相同的素数 p 或 q 在 CTF 中，同样一个 e (一般为 65537) 和 m，有两个或多个 n 和 c 时，那么 n 之间可能是共享素数</p>\n<h3 id=\"出题脚本-7\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-7\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">#生成随机素数</span><br><span class=\"line\">p1=libnum.generate_prime(1024)</span><br><span class=\"line\">p2=libnum.generate_prime(1024)</span><br><span class=\"line\">q=libnum.generate_prime(1024)</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">m=&quot;flag&#123;c9d48baa792e91ce65d175bb586f8c24&#125;&quot;</span><br><span class=\"line\">#字符串转数字</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">print(q)</span><br><span class=\"line\">n1=p1*q</span><br><span class=\"line\">n2=p2*q</span><br><span class=\"line\">#求逆元</span><br><span class=\"line\">c1=pow(m,e,n1)</span><br><span class=\"line\">c2=pow(m,e,n2)</span><br><span class=\"line\"></span><br><span class=\"line\">print (&quot;e=&quot;,e)</span><br><span class=\"line\">print(&quot;n1=&quot;,n1)</span><br><span class=\"line\">print(&quot;n2=&quot;,n2)</span><br><span class=\"line\">print (&quot;c1=&quot;,c1)</span><br><span class=\"line\">print (&quot;c2=&quot;,c2)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">112033192839831410128229314623644016892457474214603544009293323660253481717951000555944274929385767454448600673603543705582070863346470535753409649573999460325173934406017517052071246438800130085989821611221908264571097633716174917625191690203659123336145054187255755394681607476738638792807609503583942128287</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">n1= 10625543525346830676006870950185691831444597644902937688548664474839451789500623122399254396349043194137265309127150449785754269880715662352707412035793547680593086762929625928250971615306188339436585278519056416828788773974282747077277578312189120674125326857556669957819991694938110804921956107475524196753691190172084151806587432567633986959422611394848414182355921488672244553709452073236104935236677954344428768255255100054171572028934423627125634780087424402980388287407955842046167150933175146807998723396182109084926137033146724176484195516940148635702902548991068794155382834516404680151040115265524953368803</span><br><span class=\"line\">n2= 16963368478863237165539514788629717230509794880335414979340928156272483952877461650346703404736600543573268654053853406528874405233365433480511950945751787459984056635129991630952167422872043167517367026291964118481932229618540409542768859684629875635644451769141400996752979258243212278679645758472226598679049513891130451209669678914961165598718327535139903961419600189590593818949508868366591386211578344734960982688428366608540144212331829055016414892080760884384459092360249396385618417969715029114886771538141181557047932980027849299798044339800149366277557448859678544386644358923506165421387377971452133400237</span><br><span class=\"line\">c1= 3083814592613126614027965982601537654202006134791395656021465412286460166093457898156692884715856869567564841602842861925386434838975288348214401028294260689771237300101802894534580773219096180174526083320214279520998065109710357139026683126849406635064651704725592412836189737225530918963461500807604488934388123181506653107818366579852355169342727070144725895457018660958197755959464742004451789536791140205308500661680822479247916930501856845353744746803851281425962654216148374636811404978863628264660712674442063987082523071773406042384503834533479670504453823734240363238708085719130650821063973261950270161428</span><br><span class=\"line\">c2= 13740386298909001233815681484510642184547992744157132970350241427600231037472755614023548206789735269078590834449245923454385325492305659242435611300542852213722841909380700099178894703174590126112041224283933050906079878737882887340652224562292433380944052673538602232295072801399008587550855279599758738224727323486864666105237460948172863914507051497974186625462313445057775348133531846046663852734437590095553782981005686291660604880068105148369641552089807164999699933504010826666901604098508377083799595612159033508965994444726491533830781284339377808073755805290835250781114692808914390954773552997805080977899</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解题脚本-5\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本-5\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">n1= 10625543525346830676006870950185691831444597644902937688548664474839451789500623122399254396349043194137265309127150449785754269880715662352707412035793547680593086762929625928250971615306188339436585278519056416828788773974282747077277578312189120674125326857556669957819991694938110804921956107475524196753691190172084151806587432567633986959422611394848414182355921488672244553709452073236104935236677954344428768255255100054171572028934423627125634780087424402980388287407955842046167150933175146807998723396182109084926137033146724176484195516940148635702902548991068794155382834516404680151040115265524953368803</span><br><span class=\"line\">n2= 16963368478863237165539514788629717230509794880335414979340928156272483952877461650346703404736600543573268654053853406528874405233365433480511950945751787459984056635129991630952167422872043167517367026291964118481932229618540409542768859684629875635644451769141400996752979258243212278679645758472226598679049513891130451209669678914961165598718327535139903961419600189590593818949508868366591386211578344734960982688428366608540144212331829055016414892080760884384459092360249396385618417969715029114886771538141181557047932980027849299798044339800149366277557448859678544386644358923506165421387377971452133400237</span><br><span class=\"line\">c1= 3083814592613126614027965982601537654202006134791395656021465412286460166093457898156692884715856869567564841602842861925386434838975288348214401028294260689771237300101802894534580773219096180174526083320214279520998065109710357139026683126849406635064651704725592412836189737225530918963461500807604488934388123181506653107818366579852355169342727070144725895457018660958197755959464742004451789536791140205308500661680822479247916930501856845353744746803851281425962654216148374636811404978863628264660712674442063987082523071773406042384503834533479670504453823734240363238708085719130650821063973261950270161428</span><br><span class=\"line\">c2= 13740386298909001233815681484510642184547992744157132970350241427600231037472755614023548206789735269078590834449245923454385325492305659242435611300542852213722841909380700099178894703174590126112041224283933050906079878737882887340652224562292433380944052673538602232295072801399008587550855279599758738224727323486864666105237460948172863914507051497974186625462313445057775348133531846046663852734437590095553782981005686291660604880068105148369641552089807164999699933504010826666901604098508377083799595612159033508965994444726491533830781284339377808073755805290835250781114692808914390954773552997805080977899</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#求最大公约数</span><br><span class=\"line\">q=gmpy2.gcd(n1,n2)</span><br><span class=\"line\">p1=n1//q</span><br><span class=\"line\"></span><br><span class=\"line\">phi_n=(q-1)*(p1-1)</span><br><span class=\"line\">#求逆元d</span><br><span class=\"line\">d1=libnum.invmod(e,phi_n)</span><br><span class=\"line\">m=pow(c1,d1,n1)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">#数字转字节，转字符串</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13040004482825389441096275928544521243339469450955206317293093209414597159068563158095508605</span><br><span class=\"line\">flag&#123;c9d48baa792e91ce65d175bb586f8c24&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">n1= 10625543525346830676006870950185691831444597644902937688548664474839451789500623122399254396349043194137265309127150449785754269880715662352707412035793547680593086762929625928250971615306188339436585278519056416828788773974282747077277578312189120674125326857556669957819991694938110804921956107475524196753691190172084151806587432567633986959422611394848414182355921488672244553709452073236104935236677954344428768255255100054171572028934423627125634780087424402980388287407955842046167150933175146807998723396182109084926137033146724176484195516940148635702902548991068794155382834516404680151040115265524953368803</span><br><span class=\"line\">n2= 16963368478863237165539514788629717230509794880335414979340928156272483952877461650346703404736600543573268654053853406528874405233365433480511950945751787459984056635129991630952167422872043167517367026291964118481932229618540409542768859684629875635644451769141400996752979258243212278679645758472226598679049513891130451209669678914961165598718327535139903961419600189590593818949508868366591386211578344734960982688428366608540144212331829055016414892080760884384459092360249396385618417969715029114886771538141181557047932980027849299798044339800149366277557448859678544386644358923506165421387377971452133400237</span><br><span class=\"line\">c1= 3083814592613126614027965982601537654202006134791395656021465412286460166093457898156692884715856869567564841602842861925386434838975288348214401028294260689771237300101802894534580773219096180174526083320214279520998065109710357139026683126849406635064651704725592412836189737225530918963461500807604488934388123181506653107818366579852355169342727070144725895457018660958197755959464742004451789536791140205308500661680822479247916930501856845353744746803851281425962654216148374636811404978863628264660712674442063987082523071773406042384503834533479670504453823734240363238708085719130650821063973261950270161428</span><br><span class=\"line\">c2= 13740386298909001233815681484510642184547992744157132970350241427600231037472755614023548206789735269078590834449245923454385325492305659242435611300542852213722841909380700099178894703174590126112041224283933050906079878737882887340652224562292433380944052673538602232295072801399008587550855279599758738224727323486864666105237460948172863914507051497974186625462313445057775348133531846046663852734437590095553782981005686291660604880068105148369641552089807164999699933504010826666901604098508377083799595612159033508965994444726491533830781284339377808073755805290835250781114692808914390954773552997805080977899</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#求最大公约数</span><br><span class=\"line\">q=gmpy2.gcd(n1,n2)</span><br><span class=\"line\">p1=n1//q</span><br><span class=\"line\"></span><br><span class=\"line\">phi_n=(q-1)*(p1-1)</span><br><span class=\"line\">#求逆元d</span><br><span class=\"line\">d1=libnum.invmod(e,phi_n)</span><br><span class=\"line\">m=pow(c1,d1,n1)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">#数字转字节，转字符串</span><br><span class=\"line\">print(libnum.n2s(int(m)).decode())</span><br></pre></td></tr></table></figure>\n<h1 id=\"ctf-rsadp泄露\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsadp泄露\">#</a> 【CTF-RSA】dp 泄露</h1>\n<h3 id=\"出题脚本-8\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-8\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">import random</span><br><span class=\"line\">import base64</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import string</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">def put_flag():</span><br><span class=\"line\">    # 字符串列表</span><br><span class=\"line\">    a = string.printable</span><br><span class=\"line\">    flag = &quot;&quot;</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        flag += a[random.randint(0, 99)]</span><br><span class=\"line\">    flag = r&quot;flag&#123;%s&#125;&quot;%(hashlib.md5(flag.encode()).hexdigest())</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\">    return flag</span><br><span class=\"line\"></span><br><span class=\"line\">#生成素数</span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">q=libnum.generate_prime(1024)</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">dp=d%(p-1)</span><br><span class=\"line\">m=put_flag()</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;n=&quot;,n)</span><br><span class=\"line\">print(&quot;e=&quot;,e)</span><br><span class=\"line\">print(&quot;dp=&quot;,dp)</span><br><span class=\"line\">print(&quot;c=&quot;,c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;d4b1e0f286ad786066f7080b799b060c&#125;</span><br><span class=\"line\">n= 23394036014464046501402792776884457087634068433705842139487912015519104667457488035047083371965503536792460851787650081706327143805464933298095489389084818332774953793854059606978467021122060941721159940921809773870657335464362378719134317047572114687528866506353323318174138423377776372281089909340016072870263135215376731630674713954427795890261571486636276952127575752748522492589539506478258930649380768233506393076363278803060558598509815268954407266874717384390312718209478291926475527005153885465608428599031442715759260865813504888269596677881780347479592998255350058004619030108388912201581076089336119468643</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">dp= 100674509715202325036081726312774815986187000783697455044387277186714326573821809713063426618185153848167198579179497656982506746232819368900025150095426269713393750558196053535255114827412538046108647122641808177368947613148236456610301824596042041271055359866313832084853116512985378487355450567630091705649</span><br><span class=\"line\">c= 12127459340286917726546036238419091529597268566270618006396964642315960697809670228324352194626974775143594040184007995762230124277685135428557682256725346270076456760491553841122346906694778065552795002359965526224770887646547543805440124941737783340421200375963056356821003236095664853156958927717936209155044726879318559032451125971549741240792191258921980127372316983196390340347224459405077718348857806559168064784227269021302828794546867944957250008076452307745983922147833828528029871263104355277353451384507030114318047568878694705985438014743749080234970796793239251039347382419944322804681983892197888703621</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解题脚本-6\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本-6\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\">n= 23394036014464046501402792776884457087634068433705842139487912015519104667457488035047083371965503536792460851787650081706327143805464933298095489389084818332774953793854059606978467021122060941721159940921809773870657335464362378719134317047572114687528866506353323318174138423377776372281089909340016072870263135215376731630674713954427795890261571486636276952127575752748522492589539506478258930649380768233506393076363278803060558598509815268954407266874717384390312718209478291926475527005153885465608428599031442715759260865813504888269596677881780347479592998255350058004619030108388912201581076089336119468643</span><br><span class=\"line\">e= 65537</span><br><span class=\"line\">dp= 100674509715202325036081726312774815986187000783697455044387277186714326573821809713063426618185153848167198579179497656982506746232819368900025150095426269713393750558196053535255114827412538046108647122641808177368947613148236456610301824596042041271055359866313832084853116512985378487355450567630091705649</span><br><span class=\"line\">c= 12127459340286917726546036238419091529597268566270618006396964642315960697809670228324352194626974775143594040184007995762230124277685135428557682256725346270076456760491553841122346906694778065552795002359965526224770887646547543805440124941737783340421200375963056356821003236095664853156958927717936209155044726879318559032451125971549741240792191258921980127372316983196390340347224459405077718348857806559168064784227269021302828794546867944957250008076452307745983922147833828528029871263104355277353451384507030114318047568878694705985438014743749080234970796793239251039347382419944322804681983892197888703621</span><br><span class=\"line\">for i in range(1,65535):</span><br><span class=\"line\">    p=(dp*e-1)//i+1</span><br><span class=\"line\">    if n%p==0:</span><br><span class=\"line\">        q=n//p</span><br><span class=\"line\">        break</span><br><span class=\"line\">print(p)</span><br><span class=\"line\">print(q)</span><br><span class=\"line\">phi_n= (p-1)*(q-1)</span><br><span class=\"line\">d=gmpy2.invert(e,phi_n)</span><br><span class=\"line\">m=pow(c,d,n)</span><br><span class=\"line\">print(m)</span><br><span class=\"line\">flag=libnum.n2s(int(m)).decode()</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">134667619365743045595168553238362312023650599468530434568396313527895187587634403052721512639833457724360813431924046576022830236924118932514204765110094122509015108591511098512879423203741999141278981231917707934037407023776298580578629029647524334791630712323113230463832687613004097438988736658586221172249</span><br><span class=\"line\">173716860256720756010986199782897012515331445068177358103829931240562092491287733676752639070657545014548803292723216412791088678565614337516811748594976169892097100242359937925941407901138820607539009613167988691437541846667829527629900122609755232483505146549072069287070281676499661836078738207039875462107</span><br><span class=\"line\">13040004482825502968068078893777661764720816096319462874883263755612616818670936876452438909</span><br><span class=\"line\">flag&#123;d4b1e0f286ad786066f7080b799b060c&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"题目解析\"><a class=\"markdownIt-Anchor\" href=\"#题目解析\">#</a> 题目解析</h3>\n<p>已知公钥 n，e 以及 dp</p>\n<p>其中，dp = d mod (p-1)</p>\n<p>已知：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = m^e mod n</span><br><span class=\"line\">m = c^d mod n</span><br><span class=\"line\">ϕ(n)=(p−1)*(q−1)</span><br><span class=\"line\">d∗e ≡ 1 mod ϕ(n)</span><br><span class=\"line\">dp = d mod (p−1)</span><br></pre></td></tr></table></figure>\n<p>由上式可以得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp*e≡d*e mod (p−1)</span><br></pre></td></tr></table></figure>\n<p>因此可以得到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">式<span class=\"number\">1</span>：d∗e=k∗(p−<span class=\"number\">1</span>)+dp∗e</span><br><span class=\"line\">式<span class=\"number\">2</span>：d∗e≡<span class=\"number\">1</span> mod ϕ(n)</span><br></pre></td></tr></table></figure>\n<p>式 1 带入式 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=&gt; k∗(p−<span class=\"number\">1</span>)+dp∗e ≡<span class=\"number\">1</span> mod ϕ(n)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; k∗(p−<span class=\"number\">1</span>)+dp∗e ≡<span class=\"number\">1</span> mod (p−<span class=\"number\">1</span>)∗(q−<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; k1∗(p−<span class=\"number\">1</span>)+dp∗e = k2*(p−<span class=\"number\">1</span>)∗(q−<span class=\"number\">1</span>)+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; dp*e =  k2*(p−<span class=\"number\">1</span>)∗(q−<span class=\"number\">1</span>)+<span class=\"number\">1</span>-k1∗(p−<span class=\"number\">1</span>)+dp∗e</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; dp*e = (p-<span class=\"number\">1</span>)*[k2*(p-<span class=\"number\">1</span>)-k1]+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>因 dp&lt;p−1（dp 是 d//（p-1）的余数，dp&lt;p−1）</p>\n<p>所以 e &gt; k2∗(q−1)−k1</p>\n<p>假设 x=k2∗(q−1)−k1</p>\n<p>x 的范围为 (0,e)</p>\n<p>x∗(p−1)+1=dp∗e</p>\n<p>求出 p-1 方法，遍历 (0,e) 的范围，其中肯定有一个 p 可以被 n 整除，那么求出 p 和 q</p>\n<h1 id=\"ctf-rsadpdq\"><a class=\"markdownIt-Anchor\" href=\"#ctf-rsadpdq\">#</a> 【CTF-RSA】dp,dq</h1>\n<h3 id=\"出题脚本-9\"><a class=\"markdownIt-Anchor\" href=\"#出题脚本-9\">#</a> 出题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">import random</span><br><span class=\"line\">import base64</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import string</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">def put_flag():</span><br><span class=\"line\">    # 字符串列表</span><br><span class=\"line\">    a = string.printable</span><br><span class=\"line\">    flag = &quot;&quot;</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        flag += a[random.randint(0, 99)]</span><br><span class=\"line\">    flag = r&quot;flag&#123;%s&#125;&quot;%(hashlib.md5(flag.encode()).hexdigest())</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\">    return flag</span><br><span class=\"line\">#生成素数</span><br><span class=\"line\">p=libnum.generate_prime(1024)</span><br><span class=\"line\">q=libnum.generate_prime(1024)</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">phi_n=(p-1)*(q-1)</span><br><span class=\"line\">d=libnum.invmod(e,phi_n)</span><br><span class=\"line\">dp=d%(p-1)</span><br><span class=\"line\">dq=d%(q-1)</span><br><span class=\"line\">m=put_flag()</span><br><span class=\"line\">m=libnum.s2n(m)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;p=&quot;,p)</span><br><span class=\"line\">print(&quot;q=&quot;,q)</span><br><span class=\"line\">print(&quot;dq=&quot;,dq)</span><br><span class=\"line\">print(&quot;dp=&quot;,dp)</span><br><span class=\"line\">print(&quot;c=&quot;,c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;cf0e0667c7442c2062d44325dfa1fff8&#125;</span><br><span class=\"line\">p= 116448890546185683618055771450262312142016242676238094735985217275558021426787268511630302385159616509824437310766062886645283012210550645169977349508799805936368080215259139246007436664580533527641021648562878099835855488217605507804587234251629324592836704958089773215930952831323766320054699221381397968349</span><br><span class=\"line\">q= 121314447894794933957911141434811889490960407007692356648851565427612228833554613770868517878896771681675653370553153871839922174394592991198603832478356982707395565149507463608294194106890694113693573162935964314084535850523178363478442420170042255278617265943573098151866633751578364943738065761428628706039</span><br><span class=\"line\">dq= 59454945327569441442149441563463739239821128716298744269717311289340024381722395588850968548335831814757164816955258086418762841133709695047194050618312524643771276638189575715012912103380109010753068898795188028199051024351953337146407252291706779335244334724531552245903907860703808590993224196886127308379</span><br><span class=\"line\">dp= 12821691474758928437186481633048397766403546197594245870498639361893688795881668821885717411711121850784948039038831649145251723699762477006066139036811257757249066433210399450679610952158523123357151108778701014212056291911107333938353929571993792914871136350116358751944058404120303000831815761806127343937</span><br><span class=\"line\">c= 9983837067627475378248837281152077424577644386920613072097254241896471299255096730106667334607635347860798847959593316696048354026485880426581453490989579741802704101509576499437856377836305511877118962352017825827558857421137932247147226103427393215520334795953723215808736388183152444480701951305372405468290514418251173641350383981901755628956285657852767644612558903853975128656097276863834433887282035569179705730464360229607976686393639473868252704891915443982668342477474154848246082390458011231850434283927962815103615634851592101896052435074200941912168878340717415600997946705421433642907356895602555961692</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解题脚本-7\"><a class=\"markdownIt-Anchor\" href=\"#解题脚本-7\">#</a> 解题脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">import libnum</span><br><span class=\"line\"></span><br><span class=\"line\">def decrypt(dp,dq,p,q,c):</span><br><span class=\"line\">    InvQ = gmpy2.invert(q, p)</span><br><span class=\"line\">    mp = pow(c, dp, p)</span><br><span class=\"line\">    mq = pow(c, dq, q)</span><br><span class=\"line\">    m = (((mp-mq)*InvQ) % p)*q+mq</span><br><span class=\"line\">    print(libnum.n2s(int(m)).decode())</span><br><span class=\"line\"></span><br><span class=\"line\">p= 116448890546185683618055771450262312142016242676238094735985217275558021426787268511630302385159616509824437310766062886645283012210550645169977349508799805936368080215259139246007436664580533527641021648562878099835855488217605507804587234251629324592836704958089773215930952831323766320054699221381397968349</span><br><span class=\"line\">q= 121314447894794933957911141434811889490960407007692356648851565427612228833554613770868517878896771681675653370553153871839922174394592991198603832478356982707395565149507463608294194106890694113693573162935964314084535850523178363478442420170042255278617265943573098151866633751578364943738065761428628706039</span><br><span class=\"line\">dq= 59454945327569441442149441563463739239821128716298744269717311289340024381722395588850968548335831814757164816955258086418762841133709695047194050618312524643771276638189575715012912103380109010753068898795188028199051024351953337146407252291706779335244334724531552245903907860703808590993224196886127308379</span><br><span class=\"line\">dp= 12821691474758928437186481633048397766403546197594245870498639361893688795881668821885717411711121850784948039038831649145251723699762477006066139036811257757249066433210399450679610952158523123357151108778701014212056291911107333938353929571993792914871136350116358751944058404120303000831815761806127343937</span><br><span class=\"line\">c= 9983837067627475378248837281152077424577644386920613072097254241896471299255096730106667334607635347860798847959593316696048354026485880426581453490989579741802704101509576499437856377836305511877118962352017825827558857421137932247147226103427393215520334795953723215808736388183152444480701951305372405468290514418251173641350383981901755628956285657852767644612558903853975128656097276863834433887282035569179705730464360229607976686393639473868252704891915443982668342477474154848246082390458011231850434283927962815103615634851592101896052435074200941912168878340717415600997946705421433642907356895602555961692</span><br><span class=\"line\"></span><br><span class=\"line\">decrypt(dp,dq,p,q,c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;cf0e0667c7442c2062d44325dfa1fff8&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"题目解析-2\"><a class=\"markdownIt-Anchor\" href=\"#题目解析-2\">#</a> 题目解析</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">已知条件：</span><br><span class=\"line\">c = m^e mod n</span><br><span class=\"line\">m = c^d mod n</span><br><span class=\"line\">Φ(n) = (p-1)*(q-1)</span><br><span class=\"line\">d*e ≡ 1 mod Φ(n)</span><br><span class=\"line\">dp = d mod (p-1)</span><br><span class=\"line\">dq = d mod (q-1)</span><br></pre></td></tr></table></figure>\n<p>首先根据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m=c^d mod n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">gcd</span>(p,q)=<span class=\"number\">1</span></span><br><span class=\"line\">n=p∗q</span><br><span class=\"line\"></span><br><span class=\"line\">利用中国剩余定理,得：</span><br><span class=\"line\">m1=c^d mod p</span><br><span class=\"line\">m2=c^d mod q</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">已知条件</span><br><span class=\"line\">c = m^e mod n</span><br><span class=\"line\">m = c^d mod n</span><br><span class=\"line\">ϕ(n)= (p−<span class=\"number\">1</span>)*(q−<span class=\"number\">1</span>)</span><br><span class=\"line\">d*e≡ <span class=\"number\">1</span> mod ϕ(n)</span><br><span class=\"line\">dp= d mod (p−<span class=\"number\">1</span>)</span><br><span class=\"line\">dq= d mod (q−<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">m=c^d mod n</span><br><span class=\"line\">m=c^d+k*n</span><br><span class=\"line\"></span><br><span class=\"line\">因为 n=p*q</span><br><span class=\"line\">m=c^d+p*q*k</span><br><span class=\"line\"></span><br><span class=\"line\">同时取余q和p</span><br><span class=\"line\"></span><br><span class=\"line\">式<span class=\"number\">1</span> m1=c^d mod q</span><br><span class=\"line\">式<span class=\"number\">1</span> c^d=kp+m1</span><br><span class=\"line\"></span><br><span class=\"line\">式<span class=\"number\">2</span> m2=c^d mod p</span><br><span class=\"line\"></span><br><span class=\"line\">式<span class=\"number\">1</span>带入式<span class=\"number\">2</span></span><br><span class=\"line\">m2=(kp+m1) mod q</span><br><span class=\"line\"></span><br><span class=\"line\">等式两边同时减去m1</span><br><span class=\"line\">(m2−m1)≡kp mod q</span><br><span class=\"line\"></span><br><span class=\"line\">因为<span class=\"title function_\">gcd</span>(p,q)=<span class=\"number\">1</span></span><br><span class=\"line\">所以可以求p的逆元，得到</span><br><span class=\"line\">(m2−m1)*p−<span class=\"number\">1</span>≡k mod q</span><br><span class=\"line\"></span><br><span class=\"line\">得到如下两个式子</span><br><span class=\"line\">k≡(m2−m1)*p−<span class=\"number\">1</span> mod q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c^d=kp+m1</span><br><span class=\"line\">m≡c^d mod n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">上下两个式子合并</span><br><span class=\"line\"></span><br><span class=\"line\">c^d = ((m2−m1)*p−<span class=\"number\">1</span> mod q)p+m1</span><br><span class=\"line\">m ≡ c^d mod n</span><br><span class=\"line\"></span><br><span class=\"line\">最后可以有</span><br><span class=\"line\"></span><br><span class=\"line\">m≡(((m2−m1)*p−<span class=\"number\">1</span> mod q)p+m1) mod n</span><br><span class=\"line\"></span><br><span class=\"line\">只剩最后一步了</span><br><span class=\"line\"></span><br><span class=\"line\">m1≡cd mod q</span><br><span class=\"line\">m2≡cd mod p</span><br><span class=\"line\"></span><br><span class=\"line\">m1和m2怎么求</span><br><span class=\"line\"></span><br><span class=\"line\">d≡dp mod (p−<span class=\"number\">1</span>)</span><br><span class=\"line\">d≡dq mod (q−<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">那么分别带入</span><br><span class=\"line\"></span><br><span class=\"line\">m1≡cdq mod (q−<span class=\"number\">1</span>) mod q</span><br><span class=\"line\">m2≡cdp mod (p−<span class=\"number\">1</span>) mod p</span><br><span class=\"line\"></span><br><span class=\"line\">费马小定理即假如p是质数，且<span class=\"title function_\">gcd</span>(a,p)=<span class=\"number\">1</span></span><br><span class=\"line\">a^(p−<span class=\"number\">1</span>)≡<span class=\"number\">1</span> mod p</span><br><span class=\"line\"></span><br><span class=\"line\">所以如果我们有等式</span><br><span class=\"line\"></span><br><span class=\"line\">d=dp+k*(p−<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">直接带入</span><br><span class=\"line\">m2≡c^dp+k*(p−<span class=\"number\">1</span>) mod p</span><br><span class=\"line\"></span><br><span class=\"line\">这里的指数，我们拆开，为</span><br><span class=\"line\">m2≡c^dp*ck*(p−<span class=\"number\">1</span>) mod p</span><br><span class=\"line\"></span><br><span class=\"line\">ck*(p−<span class=\"number\">1</span>)≡<span class=\"number\">1</span> mod p</span><br><span class=\"line\"></span><br><span class=\"line\">因为p是大素数，显然和c互素所以可以直接得到</span><br><span class=\"line\">m2≡cd^p mod p</span><br><span class=\"line\"></span><br><span class=\"line\">那么m1根据对称性也可以同理得到</span><br><span class=\"line\"></span><br><span class=\"line\">m1≡cd^q mod q</span><br><span class=\"line\"></span><br><span class=\"line\">故此，我们现在拥有了所有条件，下面归纳一下为</span><br><span class=\"line\"></span><br><span class=\"line\">m1≡cd^q mod q</span><br><span class=\"line\">m2≡cd^p mod p</span><br><span class=\"line\">m≡(((m2−m1)*p−<span class=\"number\">1</span> mod q)p+m1) mod n</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "rsa"
            ]
        },
        {
            "id": "http://example.com/2024/05/11/Base%E5%AE%B6%E6%97%8F%E7%BC%96%E7%A0%81/",
            "url": "http://example.com/2024/05/11/Base%E5%AE%B6%E6%97%8F%E7%BC%96%E7%A0%81/",
            "title": "'Base家族编码'",
            "date_published": "2024-05-11T06:40:47.000Z",
            "content_html": "<h2 id=\"base-家族\"><a class=\"markdownIt-Anchor\" href=\"#base-家族\">#</a> Base 家族</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405072012952.png\" alt=\"\"></p>\n<h3 id=\"base64-编码\"><a class=\"markdownIt-Anchor\" href=\"#base64-编码\">#</a> Base64 编码</h3>\n<p>原理介绍：<br>\n1、将原始数据每三个字节作为一组，24bit<br>\n2、将 24bit 分为四组，每组 6 个 bit<br>\n3、在每组前面补加零，补全 4 组 8bit（原始数据从三字节变成四字节，增大近 90%）<br>\n4、根据 base64 码表对应符号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\">文      本：\tM        a        n</span><br><span class=\"line\">ASCII 编码：\t77       97       110</span><br><span class=\"line\">8bit  字节：\t01001101 01100001 01101110</span><br><span class=\"line\">6bit  字节：\t010011 010110 000101 101110</span><br><span class=\"line\">Base64索引：\t19     22     5      46</span><br><span class=\"line\">Base64编码：\tT      W      F      u</span><br></pre></td></tr></table></figure>\n<p>当位数不足时如：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405071027868.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个字节：两个字节共16个二进制位，依旧按照规则进行分组。此时总共16个二进制位，每6个一组，则第三组缺少2位，用0补齐，得到三个Base64编码，第四组完全没有数据则用“=”补上。因此，上图中“BC”转换之后为“QKM=”</span><br><span class=\"line\"></span><br><span class=\"line\">一个字节：一个字节共8个二进制位，依旧按照规则进行分组。此时共8个二进制位，每6个一组，则第二组缺少4位，用0补齐，得到两个Base64编码，而后面两组没有对应数据，都用“=”补上。因此，上图中“A”转换之后为“QQ==”</span><br></pre></td></tr></table></figure>\n<p>Base64 算法代码特征：</p>\n<p>A-Za-z0-9+/=</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405071156161.png\" alt=\"\"></p>\n<p>解码 Python 实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\"></span><br><span class=\"line\">#新表</span><br><span class=\"line\">biao = &#x27;&#x27;</span><br><span class=\"line\">#密文</span><br><span class=\"line\">origin = &quot;&quot;</span><br><span class=\"line\">#</span><br><span class=\"line\">a = str.maketrans(biao,&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;)</span><br><span class=\"line\">print(base64.b64decode(origin.translate(a)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"base32-编码\"><a class=\"markdownIt-Anchor\" href=\"#base32-编码\">#</a> Base32 编码</h3>\n<p>介绍：Base32 编码使用 32 个 ASCII 字符对任何数据进行编码，将原数据二进制形式取指定位数转换为 ASCII 码。首先获取数据的二进制形式，将其串联起来，每 5 个比特为一组进行切分，每一组内的 5 个比特可转换到指定的 32 个 ASCII 字符中的一个，将转换后的 ASCII 字符连接起来，就是编码后的数据。</p>\n<p>base32 编码表（A-Z2-7）：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405072021690.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//编码实现</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char date[100]=&quot;bacde&quot;;</span><br><span class=\"line\">    char code[100];</span><br><span class=\"line\">    unsigned char table[33]=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&quot;;</span><br><span class=\"line\">    int len_date,len_code,i,j,num;</span><br><span class=\"line\"></span><br><span class=\"line\">    len_date=strlen(date);</span><br><span class=\"line\">    printf(&quot;length of date=%d\\n&quot;,len_date);</span><br><span class=\"line\">    printf(&quot;date: %s\\n&quot;,date);</span><br><span class=\"line\">    if(len_date%5!=0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len_code=(len_date/5+1)*8;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len_code=(len_date/5)*8; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//关键代码块——————————————————————————————————————————————————————————————</span><br><span class=\"line\">    for(i=0,j=0;i&lt;len_code;i+=5,j+=8)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        code[j]=table[date[i]&gt;&gt;3];</span><br><span class=\"line\">        code[j+1]=table[((date[i]&amp;7)&lt;&lt;2)|(date[i+1]&gt;&gt;6)];</span><br><span class=\"line\">        code[j+2]=table[(date[i+1]&gt;&gt;1)&amp;31];</span><br><span class=\"line\">        code[j+3]=table[(date[i+1]&amp;1)&lt;&lt;4|date[i+2]&gt;&gt;4];</span><br><span class=\"line\">        code[j+4]=table[(date[i+2]&amp;15)&lt;&lt;1|date[i+3]&gt;&gt;7];</span><br><span class=\"line\">        code[j+5]=table[(date[i+3]&gt;&gt;2)&amp;31];</span><br><span class=\"line\">        code[j+6]=table[(date[i+3]&amp;3)&lt;&lt;3|date[i+4]&gt;&gt;5];</span><br><span class=\"line\">        code[j+7]=table[date[i+4]&amp;31];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//————————————————————————————————————————————————————————————————————————-</span><br><span class=\"line\">    num=len_date%5;</span><br><span class=\"line\">    switch(num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        case 1: </span><br><span class=\"line\">            for(i=1;i&lt;8-num;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                code[len_code-i]=&#x27;=&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            for(i=1;i&lt;7-num;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                code[len_code-i]=&#x27;=&#x27;;</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">            for(i=1;i&lt;7-num;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                code[len_code-i]=&#x27;=&#x27;;</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">            code[len_code-1]=&#x27;=&#x27;;    </span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;length of code =%d\\n&quot;,len_code);</span><br><span class=\"line\">    printf(&quot;the code:&quot;); </span><br><span class=\"line\">    for(i=0;i&lt;len_code;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;%c&quot;,code[i]);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"base16-编码\"><a class=\"markdownIt-Anchor\" href=\"#base16-编码\">#</a> Base16 编码</h3>\n<p>介绍：Base16 编码就是将 ASCII 字符集中可打印的字符 (数字 0-9 和字母 A-F) 对应的二进制字节数据进行编码，编码的方式：先将数据 (根据 ASCII 编码，UTF-8 编码等) 转成对应的二进制数，不足 8 比特位高位补 0. 然后将所有的二进制全部串起来，4 个二进制位为一组，转化成对应十进制数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char date[100]=&quot;bacde&quot;;</span><br><span class=\"line\">    char code[100];</span><br><span class=\"line\">    unsigned char table[17]=&quot;0123456789ABCDEF&quot;;</span><br><span class=\"line\">    int len_date,len_code,i,j,num;</span><br><span class=\"line\"></span><br><span class=\"line\">    len_date=strlen(date);</span><br><span class=\"line\">    printf(&quot;length of date :\\n%d\\n&quot;,len_date);</span><br><span class=\"line\">    printf(&quot;date:\\n%s\\n&quot;,date);</span><br><span class=\"line\">    len_code=len_date*2;</span><br><span class=\"line\">//————————————————————————————————————————————————————————————————————</span><br><span class=\"line\">   //关键代码块</span><br><span class=\"line\">    for(i=0,j=0;i&lt;len_date;i++,j+=2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        code[j]=table[date[i]&gt;&gt;4];</span><br><span class=\"line\">        code[j+1]=table[date[i]&amp;15]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//——————————————————————————————————————————————————————————————————————</span><br><span class=\"line\">    printf(&quot;length of code:\\n%d\\n&quot;,len_code);</span><br><span class=\"line\">    printf(&quot;code: \\n&quot;); </span><br><span class=\"line\">    for(i=0;i&lt;len_code;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;%c&quot;,code[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他简述\"><a class=\"markdownIt-Anchor\" href=\"#其他简述\">#</a> 其他简述</h3>\n<h4 id=\"base58-编码\"><a class=\"markdownIt-Anchor\" href=\"#base58-编码\">#</a> Base58 编码：</h4>\n<p>Base58 是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生 Bitcoin 的钱包地址。相比 Base64，Base58 不使用数字 “0”，字母大写 “O”，字母大写 “I”，和字母小写 “l”，以及 “+” 和 “/” 符号。 Base58 字母表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</span><br></pre></td></tr></table></figure>\n<h4 id=\"base62\"><a class=\"markdownIt-Anchor\" href=\"#base62\">#</a> Base62</h4>\n<p>Base62 使用了 62 个字符编码，包括 0-9，a-z，A-Z。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：UxIZABUpAxEZUhIxw1UhIxEFUhIVwJUlERA1</span><br></pre></td></tr></table></figure>\n<h4 id=\"base85\"><a class=\"markdownIt-Anchor\" href=\"#base85\">#</a> Base85</h4>\n<p>Base85 是一种类似于 Base64 的二进制文本编码形式，通过使用五个 ASCII 字符来表示四个字节的二进制数据。例如，它用于将图像嵌入到 Adobe PDF 文件中。</p>\n<p>Base85 包含下列字符：</p>\n<p>$%()*+,-./0123456789:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：keEPJR&#x27;5S\\JE45?jM$Q6XcN</span><br></pre></td></tr></table></figure>\n<h4 id=\"base91\"><a class=\"markdownIt-Anchor\" href=\"#base91\">#</a> Base91</h4>\n<p>顾名思义，Base91 需要 91 个字符来表示 ASCII 编码的二进制数据。</p>\n<p>Base91 包含下列字符：</p>\n<p>!&quot;#$%&amp;()*+,./0123456789:;&lt;=&gt;？</p>\n<p>@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：*~v6uRhaugfz5el@Dh!q&amp;LB</span><br></pre></td></tr></table></figure>\n<h4 id=\"base92\"><a class=\"markdownIt-Anchor\" href=\"#base92\">#</a> Base92</h4>\n<p>Base92 是用 92 个可打印字符表示 8 位二进制数据 (含无法显示 打印字符) 的编码方式。</p>\n<p>Base92 包含下列字符：</p>\n<p>!#$%&amp;’()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_abcdefghijklmnopqrstuvwxyz{|}~</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：toxRX&lt;@w&lt;U&quot;[27@\\f!Mpc*</span><br></pre></td></tr></table></figure>\n<h4 id=\"base94\"><a class=\"markdownIt-Anchor\" href=\"#base94\">#</a> Base94</h4>\n<p>Base94 是用 94 个可打印字符表示 8 位二进制数据 (含无法显示 打印字符) 的编码方式。</p>\n<p>Base94 包含下列字符：</p>\n<p>!&quot;#$%&amp;’()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~ 10.Base100</p>\n<h4 id=\"base100-编码\"><a class=\"markdownIt-Anchor\" href=\"#base100-编码\">#</a> Base100 编码</h4>\n<p>（又名：Emoji 表情符号编码 / 解码），可将文本内容编码为 Emoji 表情符号；同时也可以将编码后的 Emoji 表情符号内容解码为文本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：📟💶💐📝💏💦📛💯👷📛💯💡📛💵💂📜💤💇</span><br></pre></td></tr></table></figure>\n<h4 id=\"base128\"><a class=\"markdownIt-Anchor\" href=\"#base128\">#</a> Base128</h4>\n<p>Base128 是用 128 个字符表示 8 位二进制数据的编码方式。</p>\n<p>Base128 包含下列字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\\xb5\\xb6\\xb7\\xbc\\xbd\\xbe\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"本文作者-zoyager-welcome\"><a class=\"markdownIt-Anchor\" href=\"#本文作者-zoyager-welcome\">#</a> # 本文作者： zoyager @WELCOME</h2>\n<p># 本文链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly96b3lhZ2VyLmdpdGh1Yi5pby8yMDI0LzA1LzA3L0Jhc2UlRTUlQUUlQjYlRTYlOTclOEYlRTclQkMlOTYlRTclQTAlODEv\">https://zoyager.github.io/2024/05/07/Base 家族编码 /</span><br>\n# 版权声明： 本站所有文章除特别声明外，均采用 (CC) BY-NC-SA 许可协议。转载请注明出处！</p>\n",
            "tags": [
                "Base家族编码"
            ]
        },
        {
            "id": "http://example.com/2024/05/08/number-theory/",
            "url": "http://example.com/2024/05/08/number-theory/",
            "title": "'number-theory'",
            "date_published": "2024-05-08T08:08:12.000Z",
            "content_html": "<h1 id=\"整数\"><a class=\"markdownIt-Anchor\" href=\"#整数\">#</a> 整数</h1>\n<h2 id=\"整除的概念\"><a class=\"markdownIt-Anchor\" href=\"#整除的概念\">#</a> 整除的概念</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：设a，b是任意两个整数，其中b ≠𝟎，如果存在一个整数q 使得等式</span><br><span class=\"line\">    a = bq </span><br><span class=\"line\">成立，则称b整除a或者a被b整除，记作b | a </span><br><span class=\"line\">例：6=3*2          写做   3|6 </span><br><span class=\"line\">如果b|a,则b叫做a的因数，而a叫做b的倍数</span><br><span class=\"line\">如果b不能整除a，记作b a       &quot;|&quot;整除符号  &quot; &quot;不能整除符号</span><br><span class=\"line\"></span><br><span class=\"line\">注: (1)对任何整数 b ≠𝟎 ， b | 0</span><br><span class=\"line\"></span><br><span class=\"line\">    (2)对任何整数 b ， 有1 | b</span><br><span class=\"line\"></span><br><span class=\"line\">    (3)对任何整数 a ≠𝟎 , 有a | a</span><br><span class=\"line\"></span><br><span class=\"line\">    (4) b | a , 则b | (-a) , (-b) | (± a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"整除中的一些定理\"><a class=\"markdownIt-Anchor\" href=\"#整除中的一些定理\">#</a> 整除中的一些定理</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理1：设a，b，c ≠ 0是任意三个整数</span><br><span class=\"line\">       若c | a ， b | a ,则 c | a </span><br><span class=\"line\">定理2：设a，b，c ≠ 0是任意三个整数</span><br><span class=\"line\">       若c | a ， c | a ,则 c | a ± b</span><br><span class=\"line\">定理3：设a，b，c ≠ 0是任意三个整数</span><br><span class=\"line\">       若c | a ， c | b ,则对于任意整数s，t，有 c | sa + tb </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"b进制转换\"><a class=\"markdownIt-Anchor\" href=\"#b进制转换\">#</a> b 进制转换</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b进制转十进制：设b是大于1的正整数，则每个正整数n(十进制)可唯一地表示成</span><br><span class=\"line\"></span><br><span class=\"line\">             n = ak * bk + ak-1 * bk-1 + ······ + a1*b + a0 </span><br><span class=\"line\"></span><br><span class=\"line\">      其中ai是整数，0 &lt; ai  &lt;  b – 1   ,i = 1,2,…..,k</span><br><span class=\"line\">      </span><br><span class=\"line\">二进制---bin   八进制---oct   十进制---dec    十六进制---hex </span><br><span class=\"line\"></span><br><span class=\"line\">例子：10110（二进制）</span><br><span class=\"line\">             十进制：1*2^4 + 0*2^3 + 1*2^2 + 1*2^1 + 0*2^0 =  22</span><br><span class=\"line\"></span><br><span class=\"line\">            75621（八进制）</span><br><span class=\"line\">            十进制：7*8^4 + 5*8^3 + 6*8^2 + 2*8^1 + 1* 8^0 =  31633</span><br><span class=\"line\"></span><br><span class=\"line\">             3BF（十六进制）</span><br><span class=\"line\">             十进制：3*16^2 + 11*16^1 + 15*16^0 = 959</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"b进制转换python\"><a class=\"markdownIt-Anchor\" href=\"#b进制转换python\">#</a> b 进制转换 python</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在python中如何实现进制转换：</span><br><span class=\"line\">使用内置函数 bin()、oct()、int()、hex()</span><br><span class=\"line\"></span><br><span class=\"line\">b进制转十进制</span><br><span class=\"line\">例1:a = int (&#x27;100&#x27;,2)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    输出为4</span><br><span class=\"line\"> 例2:a = int (&#x27;777&#x27;,8) </span><br><span class=\"line\"> \tprint(a)</span><br><span class=\"line\"> \t输出为511</span><br><span class=\"line\"> 例3:a = int (&#x27;ABCF&#x27;,16)</span><br><span class=\"line\"> \tprint(a)</span><br><span class=\"line\"> \t输出为43983</span><br><span class=\"line\"> \t</span><br><span class=\"line\">十进制转b进制</span><br><span class=\"line\">例1:b = bin (10259)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    输出为0b10100000010011</span><br><span class=\"line\"> 例2:b = oct (777) </span><br><span class=\"line\"> \tprint(b)</span><br><span class=\"line\"> \t输出为0o1411</span><br><span class=\"line\"> 例3:b = hex (7777)</span><br><span class=\"line\"> \tprint(b)</span><br><span class=\"line\"> \t输出为0x1e61</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"最大公因数与最小公倍数\"><a class=\"markdownIt-Anchor\" href=\"#最大公因数与最小公倍数\">#</a> 最大公因数与最小公倍数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最大公因数：</span><br><span class=\"line\">         定义：设a1,a2,……,an是n个整数，若整数d | ak ,则称d是 a1,a2,……,an是一个公因数</span><br><span class=\"line\">\t若 a1,a2,……,an不全为零，则所有公因数中最大的一个公因数叫做 最大公因数 </span><br><span class=\"line\">\t记作d =（a，b,……）。</span><br><span class=\"line\">       特别的：当（a ，b，……）= 1,则称a，b，……是互素或互质的</span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">最小公倍数：</span><br><span class=\"line\">         定义：设a1,a2,……,an是n个整数，若整数a1 | m, a2 | m, …… , an | m 则称m是a1,a2,……,an是一个公倍数</span><br><span class=\"line\">\t若 a1,a2,……,an所有公倍数中最小正整数叫做 最小公倍数  </span><br><span class=\"line\">       记作m = [a,b,……]       </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"最大公因数的定理\"><a class=\"markdownIt-Anchor\" href=\"#最大公因数的定理\">#</a> 最大公因数的定理</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理1：设a，b，…… ,n是任意三个整数</span><br><span class=\"line\">       a,b,……,n与 |a|,|b|,……,|n|的公因数相同</span><br><span class=\"line\">\t （a，b，……,n）= （|a|，|b|，……,|n|）</span><br><span class=\"line\">定理2：设b是任意一个整数</span><br><span class=\"line\">       则（0，b）= b</span><br><span class=\"line\">       </span><br><span class=\"line\">广义欧几里得除法！！！！</span><br><span class=\"line\">\t要想先了解广义广义欧几里得除法！！！！</span><br><span class=\"line\">\t欧几里得除法，我们先了解欧几里得除法</span><br><span class=\"line\">定理：设a，b是两个整数，其中b&gt;0，则存在唯一的整数q，r使得</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\ta = q*b + r ，   0 &lt; r &lt; b </span><br><span class=\"line\">例：a = 169 ， b = 54</span><br><span class=\"line\"></span><br><span class=\"line\">        所以可得 169 = 54 * 3 + 7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"广义欧几里得除法\"><a class=\"markdownIt-Anchor\" href=\"#广义欧几里得除法\">#</a> <strong>广义欧几里得除法</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">又称辗转相除法，实际上是在反复运用欧几里得除法求得最大公因数的过程。</span><br><span class=\"line\">        在辗转相除的过程中，每一步的欧几里得算法求出的结果其实都是在将a，b转换成两个较小的整数b，c的最大公因数来计算，直到r为0时，前一次欧几里得算法的r即为a，b的最大公因数。</span><br><span class=\"line\">例：a = 169 ， b = 121</span><br><span class=\"line\"></span><br><span class=\"line\">     169  =  1*121 +  48</span><br><span class=\"line\">     121  =  2*48   +  25</span><br><span class=\"line\">     48    =  1*25   +  23</span><br><span class=\"line\">     25    =  1*23   +  2</span><br><span class=\"line\">     23    =  11*2   +  1</span><br><span class=\"line\">     2      =  2*1     +  0\t</span><br><span class=\"line\">所以，（169，121）= 1   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python实现广义欧几里得除法       </span><br><span class=\"line\">def gcd(a, b): </span><br><span class=\"line\">\twhile b!=0: </span><br><span class=\"line\">    \ta,b=b,a % b </span><br><span class=\"line\">\treturn a </span><br><span class=\"line\">1个用法</span><br><span class=\"line\">def main(): </span><br><span class=\"line\">\ta = int(input(&quot;请输入第一个整数:&quot;)) </span><br><span class=\"line\">\tb = int(input(&quot;请输入第二个整数:&quot;)) </span><br><span class=\"line\">\tresult= gcd(a, b) </span><br><span class=\"line\">\tprint(“最大公约数为:&quot;,result) </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;: </span><br><span class=\"line\">\tmain()</span><br><span class=\"line\">最后的if __name__ == &quot;__main__&quot;:语句是Python中的惯用写法，用于判断当前模块是否是直接执行的主程序。如果是直接执行的主程序，则调用main()函数；如果模块被导入到其他模块中，则main()函数不会被执行。这样可以保证模块的代码在被导入时不会立即执行，而是等到需要时再执行。</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何求最小公倍数\"><a class=\"markdownIt-Anchor\" href=\"#如何求最小公倍数\">#</a> 如何求最小公倍数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设a，b是两个正整数，则</span><br><span class=\"line\">             [a,b] = ab / (a,b)</span><br><span class=\"line\"></span><br><span class=\"line\">例：a = -1859 , b = 1573, 求[a，b]</span><br><span class=\"line\">解：\t\t\t\t\t\t\t\t\t\t\t\t\t求最大公因数:</span><br><span class=\"line\">    （-1859，1573）=（1859，1573）= 143\t\t\t\t\t\t1859 = 1*1537 + 286</span><br><span class=\"line\">     -1859 * 1573 = -2924207\t\t\t\t\t\t\t\t1573 = 5*286 + 143</span><br><span class=\"line\">     所以[a,b] = -20449\t\t\t\t\t\t\t\t\t  286 = 2*143 + 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"贝祖定理\"><a class=\"markdownIt-Anchor\" href=\"#贝祖定理\">#</a> <strong>贝祖定理</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">贝祖定理（又称裴蜀定理），说明了对任何整数a，b其最大公因数d，一定存在x、y，使ax + by = d 成立</span><br><span class=\"line\">拓展欧几里得算法：在已知a，b下，在满足贝祖定理的条件下求解x，y的值</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拓展欧几里得算法：       </span><br><span class=\"line\">例：a = 169 ， b = 121</span><br><span class=\"line\"></span><br><span class=\"line\">     169  =  1*121 +  48</span><br><span class=\"line\">     121  =  2*48   +  25</span><br><span class=\"line\">     48    =  1*25   +  23</span><br><span class=\"line\">     25    =  1*23   +  2</span><br><span class=\"line\">     23    =  11*2   +  1</span><br><span class=\"line\">     2      =  2*1     +  0\t</span><br><span class=\"line\">所以，（169，121）= 1   </span><br><span class=\"line\">上述是一次广义欧几里得除法的过程</span><br><span class=\"line\"></span><br><span class=\"line\">如果我们尝试将广义欧几里得除法进行一次逆运算？</span><br><span class=\"line\">1 =  23 -  11*2</span><br><span class=\"line\"></span><br><span class=\"line\">我们发现  2 = 25 – 1*23， 替换上式2</span><br><span class=\"line\">1 =  23 -  11*(25 – 23*1)</span><br><span class=\"line\"></span><br><span class=\"line\">我们还发现   23 = 48 – 25*1， 替换上式23</span><br><span class=\"line\">1  = (48-25*1) – 11*(25 – (48-25*1)*1)    </span><br><span class=\"line\">    =  12*48 – 23*25</span><br><span class=\"line\"></span><br><span class=\"line\">我们又发现 25 = 121 – 2*48 </span><br><span class=\"line\">1 =  12*48 – 23*(121-2*48)</span><br><span class=\"line\"></span><br><span class=\"line\">最终，我们发现48 = 169 – 1*121</span><br><span class=\"line\">1 = 12*(169 – 1*121) – 23*(121-2*(169-1*121)) </span><br><span class=\"line\">   =  58*169 – 81*121 </span><br><span class=\"line\"></span><br><span class=\"line\">我们不难发现，我们通过一次广义欧几里得除法逆运算得到了符合贝祖定理的等式</span><br><span class=\"line\">          在上式中，a = 169，b = 121 最大公因数d = 1</span><br><span class=\"line\">          我们解得x = 58 ， y = -81</span><br><span class=\"line\"></span><br><span class=\"line\">所以，所谓的拓展欧几里得算法，不过是广义欧几里得算法的逆运算罢了！</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"素数\"><a class=\"markdownIt-Anchor\" href=\"#素数\">#</a> 素数</h1>\n<h2 id=\"什么是素数\"><a class=\"markdownIt-Anchor\" href=\"#什么是素数\">#</a> <strong>什么是素数？</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">素数(prime)又称质数，是指在大于1的自然数中，除了1和它本身以外不再有其他因数  的自然数</span><br><span class=\"line\">1~30中的素数：2，3，5，7，11，13，17，19 ，23，29</span><br><span class=\"line\">素数(prime)由于其特性以及复杂性，在密码学中有着极其重要的作用，尤其是公钥密码体系。</span><br></pre></td></tr></table></figure>\n<h2 id=\"素数的算数基本定理\"><a class=\"markdownIt-Anchor\" href=\"#素数的算数基本定理\">#</a> 素数的算数基本定理</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理1(算术基本定理)：任意自整数n(n &gt; 1)，当n或是素数或是素数的乘积时，若n有分解式n  =  p1 * p2 * p3 *…… * pn和n  =  q1 * q2 * q3 *…… * qm，其中p1 ，p2 ，p3 ，…… pn，q1， q2， q3， …… qm都是素数，则有m = n，且对q1， q2， q3， …… qm，均有pi = qi </span><br><span class=\"line\"></span><br><span class=\"line\">定理2：任一大于1的整数n能够唯一地表示成</span><br><span class=\"line\">                      n = p1^a1  * p2^a2 * ……. ps^as          ai  &gt; 0 , i = 1,2,…..,s</span><br><span class=\"line\">              其中p1 ，p2 ，p3  …… ，ps为素数，上式叫做n的标准分解式</span><br><span class=\"line\">例：150 = 2*5*5*3 = 21*31*52</span><br><span class=\"line\">             999 = 3*3*3*37 = 33*37</span><br><span class=\"line\">             </span><br><span class=\"line\">算术基本定理的核心思想是素因数分解的唯一性。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"欧拉euler函数\"><a class=\"markdownIt-Anchor\" href=\"#欧拉euler函数\">#</a> 欧拉 (EULER) 函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设n是一个正整数，则1 ， 2 ，…… , n – 1中与n互素的整数个数成为欧拉函数，记作φ(n)。</span><br><span class=\"line\">切记：欧拉函数是定义在正整数上的函数， φ(n)的值等于1，2，……, n – 1中与n互素的数的个数</span><br><span class=\"line\">例： φ(10)  =  4， φ(7)  = 6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"欧拉函数的性质\"><a class=\"markdownIt-Anchor\" href=\"#欧拉函数的性质\">#</a> <strong>欧拉函数的性质</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理1： 若(m, n) = 1,则</span><br><span class=\"line\">              φ(mn) = φ(m) φ(n)</span><br><span class=\"line\">定理2： φ(n)=n(1-1/p1)(1-1/p2)……(1-1/pk)</span><br><span class=\"line\">特别地，当n = p为素数时， φ(p) = p - 1 </span><br><span class=\"line\">例： φ(15) = φ(5) φ(3) = 8</span><br><span class=\"line\">例： φ(41) =  40</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">φ(m n) = φ(m) φ(n) </span><br><span class=\"line\">             = (m-1)(n-1) </span><br><span class=\"line\">恭喜你，你已经提前掌握RSA加密算法的一部分原理啦！</span><br></pre></td></tr></table></figure>\n<h1 id=\"同余\"><a class=\"markdownIt-Anchor\" href=\"#同余\">#</a> 同余</h1>\n<h2 id=\"同余-2\"><a class=\"markdownIt-Anchor\" href=\"#同余-2\">#</a> 同余</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：给定一个正整数m，如果对于整数a，b有m  | a – b，则a，b叫做模m同余，记作</span><br><span class=\"line\">                a ≡ b (mod m )</span><br><span class=\"line\">例：因为 7 | 29 – 1 ，所以   29 ≡ 1 (mod 7 )</span><br><span class=\"line\">    因为 7 | 23 + 5 ，所以   23 ≡ -5(mod 7)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理1：设m是一个正整数，a，b是两个整数，则</span><br><span class=\"line\">              a ≡ b (mod m )</span><br><span class=\"line\">的充要条件是存在整数k，使得a = b + km</span><br><span class=\"line\">例：因67 = 8*8 + 3     ，所以67  ≡ 3 (mod 8 )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理2：模m同余是等价关系即</span><br><span class=\"line\">(1)对任意整数a， a ≡ a (mod m )</span><br><span class=\"line\"></span><br><span class=\"line\">(2)若a ≡ b (mod m ) ， 则b ≡ a (mod m )</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 若 a ≡ b (mod m )， b ≡ c (mod m )</span><br><span class=\"line\">        则a ≡ c (mod m )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定理3：模数的运算规则</span><br><span class=\"line\">模运算与基本四则运算有些相似，但是除法例外。其规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">(a + b) % p = (a % p + b % p) % p （1）</span><br><span class=\"line\"></span><br><span class=\"line\">(a – b) % p = (a % p – b % p) % p （2）</span><br><span class=\"line\"></span><br><span class=\"line\">(a * b) % p = (a % p * b % p) % p （3）</span><br><span class=\"line\"></span><br><span class=\"line\">(a^b) % p = ((a % p)^b) % p （4）</span><br><span class=\"line\"></span><br><span class=\"line\">定理3：模数的运算规则</span><br><span class=\"line\">结合律：</span><br><span class=\"line\">((a+b) % p + c) % p = (a + (b+c) % p) % p （5）</span><br><span class=\"line\"></span><br><span class=\"line\">((a*b) % p * c)% p = (a * (b*c) % p) % p （6）</span><br><span class=\"line\"></span><br><span class=\"line\">交换律：</span><br><span class=\"line\">(a + b) % p = (b+a) % p （7）</span><br><span class=\"line\"></span><br><span class=\"line\">(a * b) % p = (b * a) % p （8）</span><br><span class=\"line\"></span><br><span class=\"line\">定理3：模数的运算规则</span><br><span class=\"line\">分配律：</span><br><span class=\"line\">((a +b)% p * c) % p = ((a * c) % p + (b * c) % p) % p （9）</span><br><span class=\"line\"></span><br><span class=\"line\">重要定理：</span><br><span class=\"line\">若a≡b (% p)，则对于任意的c，都有(a + c) ≡ (b + c) (%p)；（10）</span><br><span class=\"line\">若a≡b (% p)，则对于任意的c，都有(a * c) ≡ (b * c) (%p)；（11）</span><br><span class=\"line\">若a≡b (% p)，c≡d (% p)，则 (a + c) ≡ (b + d) (%p)，(a – c) ≡ (b – d) (%p)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"逆元\"><a class=\"markdownIt-Anchor\" href=\"#逆元\">#</a> 逆元</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">逆元的概念：若 x * a ≡ 1 (mod y) , x， y 互质，则称 a 为 x 的逆元，标记为 a -1。</span><br><span class=\"line\">逆元也可认为是数论意义上的倒数</span><br><span class=\"line\">例：  7mod22的逆元</span><br><span class=\"line\">在前面，我们知道由贝祖定理可知：x，y来说，一定存在唯一的a，b使得，ax + by = (x  ,  y)。在本题当中，x = 7，y = 22，又因为要求逆元二点前提是(7 , 22) = 1,所以存在唯一结果 7a + 22b = 1</span><br><span class=\"line\">所以利用辗转相除法，我们可以求得a，b的值，如果a是正数，则其逆元就是a；如果a是负数，逆元则为b – x。答案最后是19</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"同余式\"><a class=\"markdownIt-Anchor\" href=\"#同余式\">#</a> 同余式</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如何求解一次同余式：      </span><br><span class=\"line\">定义：设m是一个正整数，f(x)为多项式</span><br><span class=\"line\">              f(x) = anxn + …… + a1x + a0</span><br><span class=\"line\">其中ai是整数，则</span><br><span class=\"line\">              f(x) ≡ b (mod m)   (1)</span><br><span class=\"line\">叫做模m的同余式。</span><br><span class=\"line\">     如果整数a使得</span><br><span class=\"line\">          f(a) ≡ b (modm)</span><br><span class=\"line\"> 成立，则x ≡ a (modm)叫做同余式(1)的一个解</span><br><span class=\"line\"> 本质上，同余式就是在取模的条件下求解方程式</span><br><span class=\"line\"></span><br><span class=\"line\">全部解 = 特解 + 通解</span><br><span class=\"line\">例：求解一次同余式  33x ≡ 22 (mod 77)  </span><br><span class=\"line\">解：首先，先计算最大公因数(33, 77) = 11, 并由(33, 77) = 11 | 22 ,,所以同余式有解，其次，运用广义欧几里得除法，求出同余式</span><br><span class=\"line\">        3x ≡ 1 (mod 7) 的一个特解 x0，≡ 5 (mod 7)</span><br><span class=\"line\">再次写出同余式3x ≡ 2 (mod 7) 的一个特解 x0 ≡ 2 * x0，≡ 3 (mod 7)   </span><br><span class=\"line\">同余式的通解为t * 𝟕𝟕/((𝟑𝟑 ,   𝟕𝟕)) ,   t = 0 , 1 , 2 ,……. , (33 , 77) - 1  </span><br><span class=\"line\">所以，同余式全部解 x ≡ 3 + t * 𝟕𝟕/((𝟑𝟑 ,   𝟕𝟕)) ≡ 3 + t *7 (mod 77)   , t = 0 , 1 , 2 ,……. , (33 , 77) - 1  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"同余式组\"><a class=\"markdownIt-Anchor\" href=\"#同余式组\">#</a> 同余式组</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：由若干个一次同余式构成的同余式组</span><br><span class=\"line\">𝒂_𝟏 𝒙≡𝒃_𝟏 (𝐦𝐨𝐝𝒎_𝟏 )</span><br><span class=\"line\">𝒂_𝟐 𝒙≡𝒃_𝟐 (𝐦𝐨𝐝𝒎_𝟐 )</span><br><span class=\"line\">𝒂_𝒏 𝒙≡𝒃_𝒏 (𝐦𝐨𝐝𝒎_𝒏 ) </span><br><span class=\"line\">定义：由若干个一次同余式构成的同余式组</span><br><span class=\"line\">如果存在 x_0 ∈ Z 使得a_i * x_0 ≡ 𝒃_𝟏 (𝐦𝐨𝐝𝒎_i)(i = 1,2,3……)</span><br><span class=\"line\">则  x ≡ (mod[m_1,m_2,……])  为其解 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">同余式组定理：中国剩余定理      </span><br><span class=\"line\">定义：m1 , m2 , …….,mk是k个两两互素的正整数，则对任意的整数b1 ,b2,…… , bk, 同余式组</span><br><span class=\"line\">𝒂_𝟏 𝒙≡𝒃_𝟏 (𝐦𝐨𝐝𝒎_𝟏 )</span><br><span class=\"line\">𝒂_𝟐 𝒙≡𝒃_𝟐 (𝐦𝐨𝐝𝒎_𝟐 )                 (1)</span><br><span class=\"line\"></span><br><span class=\"line\">𝒂_𝒏 𝒙≡𝒃_𝒏 (𝐦𝐨𝐝𝒎_𝒏 ) </span><br><span class=\"line\">有唯一解，其解为</span><br><span class=\"line\">x=M&#x27;_1*M_1*b, +M&#x27;_2*M_2*b, +..+M&#x27;_k*M_k*b (modm) (2) </span><br><span class=\"line\">其中m=m_1* m_2....m_k m=m_i*M_i,M&#x27;_i M_i=1(mod m_i) i-1,2,L,k </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "number-theory"
            ]
        },
        {
            "id": "http://example.com/2024/05/08/buuctf/",
            "url": "http://example.com/2024/05/08/buuctf/",
            "title": "'buuctf'",
            "date_published": "2024-05-08T04:19:48.000Z",
            "content_html": "<h2 id=\"一眼就解密\"><a class=\"markdownIt-Anchor\" href=\"#一眼就解密\">#</a> 一眼就解密</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">题目</span><br><span class=\"line\">下面的字符串解密后便能获得flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</span><br><span class=\"line\">注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解题思路</span><br><span class=\"line\">观察密文，可以看到有一个=，这是base 64的标志，三个字节为一组，需要4个base 64 编码来表达，不够的编码用=来补充</span><br><span class=\"line\">所以用base 64来解密</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开 http://www.hiencode.com/</span><br><span class=\"line\">找到base 64解密</span><br><span class=\"line\">输入ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</span><br><span class=\"line\">得到flag&#123;THE_FLAG_OF_THIS_STRING&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "buuctf"
            ]
        },
        {
            "id": "http://example.com/2024/05/07/python%E5%B0%8F%E7%BB%93/",
            "url": "http://example.com/2024/05/07/python%E5%B0%8F%E7%BB%93/",
            "title": "'python小结'",
            "date_published": "2024-05-07T09:56:32.000Z",
            "content_html": "<h2 id=\"乘法表\"><a class=\"markdownIt-Anchor\" href=\"#乘法表\">#</a> 乘法表</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">j=1</span><br><span class=\"line\">while j&lt;10:</span><br><span class=\"line\">    i=1</span><br><span class=\"line\">    while i&lt;=j:    </span><br><span class=\"line\">        print(f&#x27;&#123;i&#125;*&#123;j&#125;=&#123;i*j&#125;&#x27;,end=&#x27;\\t&#x27;)</span><br><span class=\"line\">        i+=1 </span><br><span class=\"line\">    print()</span><br><span class=\"line\">    j+=1</span><br></pre></td></tr></table></figure>\n<h2 id=\"星号\"><a class=\"markdownIt-Anchor\" href=\"#星号\">#</a> 星号</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i=1</span><br><span class=\"line\">while i&lt;=5:</span><br><span class=\"line\">    print (&#x27;*&#x27;*i)</span><br><span class=\"line\">    i=i+1</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def han(a,b):</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x27;&#x27;&#x27;加法函数&#x27;&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  x=a+b</span><br><span class=\"line\"></span><br><span class=\"line\">  print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">han(12,13)</span><br><span class=\"line\"></span><br><span class=\"line\">help(han)``</span><br></pre></td></tr></table></figure>\n<h2 id=\"位置参数\"><a class=\"markdownIt-Anchor\" href=\"#位置参数\">#</a> 位置参数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def xiao(姓名,年龄,性别):</span><br><span class=\"line\">    print(f&#x27;您的姓名是&#123;姓名&#125;,性别是&#123;性别&#125;,年龄是&#123;年龄&#125;岁&#x27;)</span><br><span class=\"line\">xiao(&#x27;圥忈&#x27;,&#x27;20&#x27;,&#x27;男&#x27;)</span><br><span class=\"line\">xiao( 姓名=&#x27;圥忈&#x27;,年龄=&#x27;20&#x27;,性别=&#x27;男&#x27;)</span><br><span class=\"line\">xiao( &#x27;圥忈&#x27;,性别=&#x27;男&#x27;,年龄=&#x27;20&#x27;)</span><br><span class=\"line\">xiao( &#x27;20&#x27;,姓名=&#x27;圥忈&#x27;,性别=&#x27;男&#x27;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"可变函数\"><a class=\"markdownIt-Anchor\" href=\"#可变函数\">#</a> 可变函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def name(*args):</span><br><span class=\"line\">    &#x27;&#x27;&#x27;位置可变函数&#x27;&#x27;&#x27;</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">def abc(**kwargs):</span><br><span class=\"line\">    &#x27;&#x27;&#x27;关键字可变函数&#x27;&#x27;&#x27;</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\">abc(长=20,宽=10,高=10)</span><br><span class=\"line\">name(20)</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组的拆包\"><a class=\"markdownIt-Anchor\" href=\"#元组的拆包\">#</a> 元组的拆包</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 元组</span><br><span class=\"line\">a=(1,2,3,)</span><br><span class=\"line\">x,y,z=a</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(y)</span><br><span class=\"line\">print(z)</span><br><span class=\"line\"># 字典</span><br><span class=\"line\">c=&#123;&#x27;姓名&#x27;:&#x27;圥忈&#x27;,&#x27;年龄&#x27;:20&#125;</span><br><span class=\"line\">def name():</span><br><span class=\"line\">    return c</span><br><span class=\"line\">a,b=c</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c[a])</span><br><span class=\"line\">print(c[b])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的递归\"><a class=\"markdownIt-Anchor\" href=\"#函数的递归\">#</a> 函数的递归</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def 递归(a):</span><br><span class=\"line\">    if a == 1:</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    x=a+递归(a-1)</span><br><span class=\"line\">    return x</span><br><span class=\"line\">x = 递归(100)</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></figure>\n<h2 id=\"filter函数\"><a class=\"markdownIt-Anchor\" href=\"#filter函数\">#</a> filter 函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(list(filter(lambda x : x % 2 ,range(1,11))))</span><br><span class=\"line\">print(list(filter(lambda x : x % 2 == 0,range(1,11))))</span><br><span class=\"line\">&#x27;&#x27;&#x27;filter(函数名，可迭代对象)&#x27;&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;&#x27;打印出来是对象地址&#x27;&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;&#x27;转为列表在打印&#x27;&#x27;&#x27;</span><br><span class=\"line\"># filter有两个参数，第1参数可以是函数，也可以是None.</span><br><span class=\"line\">#当第一个参数是函数的时候，将第2个参数中每个元素进行计算。</span><br><span class=\"line\">#当第1个参数是函数的时候，直接将第二个参数中为True的值筛选出来</span><br></pre></td></tr></table></figure>\n<h2 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\">#</a> map 函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#map (函数名，迭代对象)</span><br><span class=\"line\">#将函数的每一个元素作为函数的参数进行运算加工，直到每一个数据加工完毕</span><br><span class=\"line\">print(list(map(lambda x : x**2 ,range(1,11))))</span><br></pre></td></tr></table></figure>\n<h2 id=\"reduce函数\"><a class=\"markdownIt-Anchor\" href=\"#reduce函数\">#</a> reduce 函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import functools#导入模块</span><br><span class=\"line\">print (functools.reduce(lambda x,y : x+y ,range (1,100)))</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件备份\"><a class=\"markdownIt-Anchor\" href=\"#文件备份\">#</a> 文件备份</h2>\n<p>找到一个自己的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;&#x27;文件备份&#x27;&#x27;&#x27;</span><br><span class=\"line\">文件名 = input(&#x27;请输入你要备份的文件名：&#x27;)</span><br><span class=\"line\">点的位置 = 文件名.rfind(&#x27;.&#x27;)</span><br><span class=\"line\">if 点的位置 &gt; 0:</span><br><span class=\"line\">    后缀 = 文件名[点的位置:]</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&#x27;文件名输入错误&#x27;)</span><br><span class=\"line\">新名字 = 文件名[0:点的位置]+&#x27;[备份]&#x27;+ 后缀</span><br><span class=\"line\">文件对象旧 = open(文件名,&#x27;rb&#x27;)</span><br><span class=\"line\">文件对象新 = open(新名字,&#x27;wb&#x27;)</span><br><span class=\"line\">#不确定文件大小循环读取</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    读取数据 = 文件对象旧.read(6)</span><br><span class=\"line\">    if len(读取数据) == 0:#读完了</span><br><span class=\"line\">        break</span><br><span class=\"line\">    文件对象新.write(读取数据)</span><br><span class=\"line\">文件对象旧.close()</span><br><span class=\"line\">文件对象新.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件和文件夹\"><a class=\"markdownIt-Anchor\" href=\"#文件和文件夹\">#</a> 文件和文件夹</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#文件对象=open (&#x27;文件名&#x27;，&#x27;访问模式&#x27;)</span><br><span class=\"line\">#&#x27;r&#x27;只读  &#x27;w&#x27;&#x27;写入&#x27;  &#x27;a&#x27;&#x27;追加&#x27;若省略为只读模式。</span><br><span class=\"line\">&#x27;&#x27;&#x27;有b为二进制有+为可读可写&#x27;&#x27;&#x27;</span><br><span class=\"line\">#r、rb、r+、rb+：只要文件不存在都报错，文件指针（光标的位置）放在文件开头</span><br><span class=\"line\">#w、wb、w+、wb+、：只要文件不存在就新建文件，文件指针在开头，用新内容覆盖原内容</span><br><span class=\"line\">#a、ab、a+、ab+：只要文件不存在新建文件，文件指针在结尾</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;读写&#x27;&#x27;&#x27;</span><br><span class=\"line\"># 文件对象.write(&#x27;内容&#x27;)</span><br><span class=\"line\"># 文件对象.read(&#x27;num&#x27;)num表示要从文件中读取数据的长度\\n为一个字节，不写为全部</span><br><span class=\"line\">a = open (&#x27;1.txt&#x27;,&#x27;w&#x27;) </span><br><span class=\"line\">a.write(&#x27;&#x27;&#x27;aaaa</span><br><span class=\"line\">bbbb</span><br><span class=\"line\">cccc</span><br><span class=\"line\">&#x27;&#x27;&#x27;)</span><br><span class=\"line\">a.close()</span><br><span class=\"line\"></span><br><span class=\"line\">a = open (&#x27;1.txt&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">print(a.read(6))</span><br><span class=\"line\">a.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;文件对象.readlines()#需要赋值给一个变量&#x27;&#x27;&#x27;</span><br><span class=\"line\"># 整个文件的内容一次性读取，并返回一个列表原文件中每一行为一个元素</span><br><span class=\"line\"># 每一行都有一个\\n，最后一行没有</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;文件对象名.readline#需要赋值给一个变量&#x27;&#x27;&#x27;</span><br><span class=\"line\"># 一次性读取一行内容，第一次读取第一行，第二次读取第二行，不带换行符。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;seek()移动文件指针&#x27;&#x27;&#x27;</span><br><span class=\"line\">#文件对象》seek(偏移量，起始位置)</span><br><span class=\"line\"># 起始位置：0开头，1当前位置，2文件结尾</span><br><span class=\"line\"># 偏移位置：假设起始位置为开头，偏移量是5，那文件从第六个字节上开始</span><br><span class=\"line\"># 偏移量和起始位置都为0时，可以只写一个0</span><br><span class=\"line\">a = open (&#x27;1.txt&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">a.seek(2,0)</span><br><span class=\"line\">print(a.read())</span><br><span class=\"line\">a.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;文件备份&#x27;&#x27;&#x27;</span><br><span class=\"line\">文件名 = input(&#x27;请输入你要备份的文件名：&#x27;)</span><br><span class=\"line\">点的位置 = 文件名.rfind(&#x27;.&#x27;)</span><br><span class=\"line\">if 点的位置 &gt; 0:</span><br><span class=\"line\">    后缀 = 文件名[点的位置:]</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&#x27;文件名输入错误&#x27;)</span><br><span class=\"line\">新名字 = 文件名[0:点的位置]+&#x27;[备份]&#x27;+ 后缀</span><br><span class=\"line\">文件对象旧 = open(文件名,&#x27;rb&#x27;)</span><br><span class=\"line\">文件对象新 = open(新名字,&#x27;wb&#x27;)</span><br><span class=\"line\">#不确定文件大小循环读取</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    读取数据 = 文件对象旧.read(6)</span><br><span class=\"line\">    if len(读取数据) == 0:#读完了</span><br><span class=\"line\">        break</span><br><span class=\"line\">    文件对象新.write(读取数据)</span><br><span class=\"line\">文件对象旧.close()</span><br><span class=\"line\">文件对象新.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件和文件夹模块操作\"><a class=\"markdownIt-Anchor\" href=\"#文件和文件夹模块操作\">#</a> 文件和文件夹模块操作</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os #导入模块</span><br><span class=\"line\">#os.函数名()    使用os模块相关的功能</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.rename(&#x27;旧文件名&#x27;,&#x27;新文件名&#x27;)&#x27;&#x27;&#x27;#改文件名</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.remove(&#x27;文件名)&#x27;&#x27;&#x27;#删除文件不可以删文件夹</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.mddir(&#x27;新文件夹&#x27;)&#x27;&#x27;&#x27;#创建文件夹</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.rmdir(&#x27;文件夹&#x27;)&#x27;&#x27;&#x27;#删除文件夹</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.hetcwd()&#x27;&#x27;&#x27;#查看文件夹所在目录需要print</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.chdir&#x27;&#x27;&#x27;#改变默认目录</span><br><span class=\"line\">#在aa的目录下创建bb目录</span><br><span class=\"line\">#os.chdir（&#x27;aa&#x27;）</span><br><span class=\"line\">#os.mkdir(&#x27;bb&#x27;)</span><br><span class=\"line\">&#x27;&#x27;&#x27;os.listdir&#x27;&#x27;&#x27;#获取某个文件夹下的所有文件和文件夹，返回一个列表</span><br></pre></td></tr></table></figure>\n<h2 id=\"批量修改文件名\"><a class=\"markdownIt-Anchor\" href=\"#批量修改文件名\">#</a> 批量修改文件名</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os </span><br><span class=\"line\">用户输入0 = input(r&#x27;输入文件夹所咋路径（例如 c:\\abc）:&#x27;)</span><br><span class=\"line\">用户输入1 = input(&#x27;请输入要添加或删除的名字:&#x27;)</span><br><span class=\"line\">用户输入2  = int(input(&#x27;添加请按1,删除请按2:&#x27;))</span><br><span class=\"line\">目录列表 = os.listdir(用户输入0)</span><br><span class=\"line\">for 遍历文件名 in 目录列表:</span><br><span class=\"line\">    if 用户输入2 == 1:</span><br><span class=\"line\">        新名字 = 用户输入1 + 遍历文件名</span><br><span class=\"line\">        print(新名字)</span><br><span class=\"line\">    elif 用户输入2 == 2:</span><br><span class=\"line\">        前缀长度 = len(用户输入1)</span><br><span class=\"line\">        新名字 = 遍历文件名[前缀长度:]</span><br><span class=\"line\">        print(新名字)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&#x27;输入错误,只能输入1或2&#x27;)</span><br><span class=\"line\">        break</span><br><span class=\"line\">    os.chdir(用户输入0 )</span><br><span class=\"line\">    os.rename(遍历文件名,新名字)xxxxxxxxxx import os 用户输入0 = input(r&#x27;输入文件夹所咋路径（例如 c:\\abc）:&#x27;)用户输入1 = input(&#x27;请输入要添加或删除的名字:&#x27;)用户输入2  = int(input(&#x27;添加请按1,删除请按2:&#x27;))目录列表 = os.listdir(用户输入0)for 遍历文件名 in 目录列表:    if 用户输入2 == 1:        新名字 = 用户输入1 + 遍历文件名        print(新名字)    elif 用户输入2 == 2:        前缀长度 = len(用户输入1)        新名字 = 遍历文件名[前缀长度:]        print(新名字)    else:        print(&#x27;输入错误,只能输入1或2&#x27;)        break    os.chdir(用户输入0 )    os.rename(遍历文件名,新名字)1</span><br></pre></td></tr></table></figure>\n<h2 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def  a1 (x):</span><br><span class=\"line\">    def a2(*arge,**kwarge):</span><br><span class=\"line\">        print(&#x27;开始&#x27;)</span><br><span class=\"line\">        x(*arge,**kwarge)</span><br><span class=\"line\">        print(&#x27;结束&#x27;)</span><br><span class=\"line\">    return a2</span><br><span class=\"line\"></span><br><span class=\"line\">@a1</span><br><span class=\"line\">def a3(name,time):</span><br><span class=\"line\">    print(f&#x27;&#123;name&#125;开始吃饭，现在&#123;time&#125;点了&#x27;)</span><br><span class=\"line\">a3 (&#x27;圥忈&#x27;,20)</span><br><span class=\"line\"></span><br><span class=\"line\">@a1</span><br><span class=\"line\">def a4(age):</span><br><span class=\"line\">    print(f&#x27;我的年龄是&#123;age&#125;岁&#x27;)</span><br><span class=\"line\">a4 (20)</span><br><span class=\"line\"></span><br><span class=\"line\">@a1</span><br><span class=\"line\">def a5(name,time,**kwargs):</span><br><span class=\"line\">    print(f&#x27;我叫&#123;name&#125;，现在&#123;time&#125;点了&#x27;)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\">a5 (&#x27;圥忈&#x27;,18,姓名 = &#x27;圥忈&#x27;,年龄 = 20,性别 = &#x27;男&#x27;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"面相对象定义类及方法调用\"><a class=\"markdownIt-Anchor\" href=\"#面相对象定义类及方法调用\">#</a> 面相对象。定义类及方法调用</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名():</span><br><span class=\"line\">    def __init__(self,姓名,年龄):</span><br><span class=\"line\">        #添加实例属性</span><br><span class=\"line\">        self.姓名 = 姓名</span><br><span class=\"line\">        self.年龄 = 年龄</span><br><span class=\"line\">    def 实例方法(self):</span><br><span class=\"line\">        print (f&#x27;我的姓名是&#123;self.姓名&#125;,年龄是&#123;self.年龄&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">对象1 = 类名(&#x27;圥忈&#x27;,20)#创建对象</span><br><span class=\"line\">对象1.实例方法()#调用实例方法</span><br><span class=\"line\"></span><br><span class=\"line\">对象2 = 类名(&#x27;圥&#x27;,20)</span><br><span class=\"line\">对象2.实例方法()</span><br><span class=\"line\"></span><br><span class=\"line\">对象3 = 类名(&#x27;忈&#x27;,20)</span><br><span class=\"line\">对象3.实例方法()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象构造函数\"><a class=\"markdownIt-Anchor\" href=\"#面向对象构造函数\">#</a> 面向对象，构造函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 月饼():</span><br><span class=\"line\">    def __init__ (self):</span><br><span class=\"line\">        #焙烤的时间</span><br><span class=\"line\">        self.时间 = 0</span><br><span class=\"line\">        #烤的状态</span><br><span class=\"line\">        self.状态 = &#x27;生的&#x27;</span><br><span class=\"line\">        #调料列表</span><br><span class=\"line\">        self.调料 = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def 焙烤时间(self,时间):</span><br><span class=\"line\">    #1.先计算月饼整体焙烤的时间 </span><br><span class=\"line\">        self.时间 += 时间</span><br><span class=\"line\">        #2.用整体烤过的时间再判断</span><br><span class=\"line\">        if 0 &lt;= self.时间 &lt; 3:</span><br><span class=\"line\">            self.状态 = &#x27;生的&#x27;</span><br><span class=\"line\">        elif 3 &lt;= self.时间 &lt; 5:</span><br><span class=\"line\">            self.状态 = &#x27;半生不熟&#x27;</span><br><span class=\"line\">        elif 5 &lt;= self.时间 &lt; 8:</span><br><span class=\"line\">            self.状态 = &#x27;熟了&#x27;</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.状态 = &#x27;糊了&#x27;</span><br><span class=\"line\">    </span><br><span class=\"line\">    def 添加调料(self,调料):</span><br><span class=\"line\">        self.调料.extend(调料)</span><br><span class=\"line\">        </span><br><span class=\"line\">    #书写str魔法方法,属于输出对象状态。</span><br><span class=\"line\">    def __str__ (self):</span><br><span class=\"line\">        return f&#x27;这批月饼被考过的时间是&#123;self.时间&#125;，状态是&#123;self.状态&#125;，调料有&#123;self.调料&#125;&#x27;</span><br><span class=\"line\">对象名 = 月饼()</span><br><span class=\"line\">对象名.焙烤时间(2)</span><br><span class=\"line\">对象名.添加调料([&#x27;蔓越莓&#x27;,&#x27;豆沙&#x27;])</span><br><span class=\"line\">print(对象名)</span><br><span class=\"line\">对象名.焙烤时间(4)</span><br><span class=\"line\">对象名.添加调料([&#x27;蛋黄&#x27;,&#x27;蛋液&#x27;])</span><br><span class=\"line\">print(对象名)xxxxxxxxxx class 月饼():    def __init__ (self):        #焙烤的时间        self.时间 = 0        #烤的状态        self.状态 = &#x27;生的&#x27;        #调料列表        self.调料 = []    def 焙烤时间(self,时间):    #1.先计算月饼整体焙烤的时间         self.时间 += 时间        #2.用整体烤过的时间再判断        if 0 &lt;= self.时间 &lt; 3:            self.状态 = &#x27;生的&#x27;        elif 3 &lt;= self.时间 &lt; 5:            self.状态 = &#x27;半生不熟&#x27;        elif 5 &lt;= self.时间 &lt; 8:            self.状态 = &#x27;熟了&#x27;        else:            self.状态 = &#x27;糊了&#x27;        def 添加调料(self,调料):        self.调料.extend(调料)            #书写str魔法方法,属于输出对象状态。    def __str__ (self):        return f&#x27;这批月饼被考过的时间是&#123;self.时间&#125;，状态是&#123;self.状态&#125;，调料有&#123;self.调料&#125;&#x27;对象名 = 月饼()对象名.焙烤时间(2)对象名.添加调料([&#x27;蔓越莓&#x27;,&#x27;豆沙&#x27;])print(对象名)对象名.焙烤时间(4)对象名.添加调料([&#x27;蛋黄&#x27;,&#x27;蛋液&#x27;])print(对象名)1</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象单继承\"><a class=\"markdownIt-Anchor\" href=\"#面向对象单继承\">#</a> 面向对象单继承</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 小头爸爸(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.age = 30</span><br><span class=\"line\">    def 实例方法(self):</span><br><span class=\"line\">        print(f&quot;小头爸爸的年龄是&#123;self.age&#125;岁&quot;)</span><br><span class=\"line\">class 大头儿子(小头爸爸):</span><br><span class=\"line\">    pass</span><br><span class=\"line\">对象 = 大头儿子()</span><br><span class=\"line\">对象.实例方法()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象多继承1\"><a class=\"markdownIt-Anchor\" href=\"#面向对象多继承1\">#</a> 面向对象，多继承 1</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 叶问(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;咏春&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 李小龙(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;截拳道&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 圥忈(李小龙,叶问):</span><br><span class=\"line\">    pass</span><br><span class=\"line\">对象 = 圥忈()</span><br><span class=\"line\">对象.实例()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class 叶问(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;咏春&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 李小龙(叶问):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;截拳道&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 圥忈(李小龙):</span><br><span class=\"line\">    pass</span><br><span class=\"line\">对象 = 圥忈()</span><br><span class=\"line\">对象.实例()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#手动查类的继承顺序</span><br><span class=\"line\">print(圥忈.__mro__)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象多继承2\"><a class=\"markdownIt-Anchor\" href=\"#面向对象多继承2\">#</a> 面向对象，多继承 2</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 叶问(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;咏春&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 李小龙(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;截拳道&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 圥忈(李小龙,叶问):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;健身&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\">对象 = 圥忈()</span><br><span class=\"line\">对象.实例()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class 叶问(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;咏春&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 李小龙(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;截拳道&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 圥忈(李小龙,叶问):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;健身&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\">    def 叶问_实例(self):</span><br><span class=\"line\">        叶问.__init__(self)</span><br><span class=\"line\">        叶问.实例(self)</span><br><span class=\"line\">    def 李小龙_实例(self):</span><br><span class=\"line\">        李小龙.__init__(self)</span><br><span class=\"line\">        李小龙.实例(self)</span><br><span class=\"line\">对象 = 圥忈()</span><br><span class=\"line\">对象.实例()</span><br><span class=\"line\">对象.叶问_实例()</span><br><span class=\"line\">对象.李小龙_实例()</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象组合\"><a class=\"markdownIt-Anchor\" href=\"#面向对象组合\">#</a> 面向对象，组合</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 叶问(object):</span><br><span class=\"line\">    def __init__(self,x):</span><br><span class=\"line\">        self.功夫 = x</span><br><span class=\"line\">class 李小龙(object):</span><br><span class=\"line\">    def __init__(self,x):</span><br><span class=\"line\">        self.功夫 = x</span><br><span class=\"line\">class 香港(object):</span><br><span class=\"line\">    def __init__(self,x,y):</span><br><span class=\"line\">        self.叶问 = 叶问(x)</span><br><span class=\"line\">        self.李小龙 = 李小龙(y)</span><br><span class=\"line\">    def print_功夫(self):</span><br><span class=\"line\">        print(f&#x27;在香港，叶问使用功夫&#123;self.叶问.功夫&#125;次，李小龙使用功夫&#123;self.李小龙.功夫&#125;次&#x27;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">香港 = 香港(1,10)</span><br><span class=\"line\">香港.print_功夫()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;self.李小龙 = 李小龙(y)&#x27;#公有</span><br><span class=\"line\">&#x27;self.__李小龙 = 李小龙(y)&#x27;#私有不继承给下一个人</span><br></pre></td></tr></table></figure>\n<h2 id=\"敏队对象获取和修改\"><a class=\"markdownIt-Anchor\" href=\"#敏队对象获取和修改\">#</a> 敏队对象获取和修改</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 圥(object):</span><br><span class=\"line\">    def 忈(self):</span><br><span class=\"line\">        self._武器 = &#x27;屠龙刀&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    def 获取武器(self):</span><br><span class=\"line\">        return self._武器</span><br><span class=\"line\"></span><br><span class=\"line\">    def 修改武器(self, new_weapon):</span><br><span class=\"line\">        self._武器 = new_weapon</span><br><span class=\"line\"></span><br><span class=\"line\">obj = 圥()</span><br><span class=\"line\">obj.忈()</span><br><span class=\"line\">print(obj.获取武器())</span><br><span class=\"line\">obj.修改武器(&#x27;倚天剑&#x27;)</span><br><span class=\"line\">print(obj.获取武器())xxxxxxxxxx class 圥(object):    def 忈(self):        self._武器 = &#x27;屠龙刀&#x27;    def 获取武器(self):        return self._武器    def 修改武器(self, new_weapon):        self._武器 = new_weaponobj = 圥()obj.忈()print(obj.获取武器())obj.修改武器(&#x27;倚天剑&#x27;)print(obj.获取武器())1</span><br></pre></td></tr></table></figure>\n<h2 id=\"面对对象函数\"><a class=\"markdownIt-Anchor\" href=\"#面对对象函数\">#</a> 面对对象，函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 叶问(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;咏春&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 李小龙(叶问):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;截拳道&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        super().实例()</span><br><span class=\"line\"></span><br><span class=\"line\">class 圥忈(李小龙,叶问):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.功夫 = &#x27;健身&#x27;</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print(f&#x27;使用&#123;self.功夫&#125;&#x27;)</span><br><span class=\"line\">    def 叶问_实例(self):</span><br><span class=\"line\">        叶问.__init__(self)</span><br><span class=\"line\">        叶问.实例(self)</span><br><span class=\"line\">    def 李小龙_实例(self):</span><br><span class=\"line\">        李小龙.__init__(self)</span><br><span class=\"line\">        李小龙.实例(self)</span><br><span class=\"line\">    def 叶问和李小龙实例(self):</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        super().实例()</span><br><span class=\"line\"></span><br><span class=\"line\">对象 = 圥忈()</span><br><span class=\"line\">对象.叶问和李小龙实例()</span><br></pre></td></tr></table></figure>\n<h2 id=\"面对对象多态\"><a class=\"markdownIt-Anchor\" href=\"#面对对象多态\">#</a> 面对对象，多态</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 复仇者联盟 (object):</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print (&#x27;消灭灭霸&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 钢铁侠 (复仇者联盟):</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print (&#x27;空中作战&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 美国队长 (复仇者联盟):</span><br><span class=\"line\">    def 实例 (self):</span><br><span class=\"line\">        print (&#x27;地面作战&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class 神盾局 (object):</span><br><span class=\"line\">    def 指挥实例 (self):</span><br><span class=\"line\">        复仇者联盟.实例()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">帮派1 = 钢铁侠 ()</span><br><span class=\"line\">帮派2 = 美国队长 ()</span><br><span class=\"line\"></span><br><span class=\"line\">对象 = 神盾局 ()</span><br><span class=\"line\">对象.指挥实例(帮派1)</span><br><span class=\"line\">对象.指挥实例(帮派2)xxxxxxxxxx class 复仇者联盟 (object):    def 实例 (self):        print (&#x27;消灭灭霸&#x27;)class 钢铁侠 (复仇者联盟):    def 实例 (self):        print (&#x27;空中作战&#x27;)class 美国队长 (复仇者联盟):    def 实例 (self):        print (&#x27;地面作战&#x27;)class 神盾局 (object):    def 指挥实例 (self):        复仇者联盟.实例()帮派1 = 钢铁侠 ()帮派2 = 美国队长 ()对象 = 神盾局 ()对象.指挥实例(帮派1)对象.指挥实例(帮派2)1</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理和储存数据\"><a class=\"markdownIt-Anchor\" href=\"#异常处理和储存数据\">#</a> 异常处理和储存数据</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = int(input())</span><br><span class=\"line\">b = int(input())</span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(a/b)</span><br><span class=\"line\">except:</span><br><span class=\"line\">    &#x27;except(1,2,3):&#x27;</span><br><span class=\"line\">    print(&#x27;分母不能为零&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(a/b)</span><br><span class=\"line\">    &#x27;except(1,2,3) as 变量名:&#x27;</span><br><span class=\"line\">except Exception as 出错消息:</span><br><span class=\"line\">    print(f&#x27;出错了，出错信息是&#123;出错消息&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;else&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(a/b)</span><br><span class=\"line\">    &#x27;except(1,2,3) as 变量名:&#x27;</span><br><span class=\"line\">except Exception as 出错消息:</span><br><span class=\"line\">    print(f&#x27;出错了，出错信息是&#123;出错消息&#125;&#x27;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&#x27;我是else一切正常&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    变量名 = open(&#x27;1.txt&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">except:</span><br><span class=\"line\">    变量名 = open(&#x27;1.txt&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&#x27;没有异常&#x27;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    #文件关闭</span><br><span class=\"line\">    变量名.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#不使用close</span><br><span class=\"line\">try:</span><br><span class=\"line\">    with open(&#x27;1.txt&#x27;,&#x27;w&#x27;)as 变量名:</span><br><span class=\"line\">        for i in 变量名:</span><br><span class=\"line\">            print(i)</span><br><span class=\"line\">except Exception as 错误信息:</span><br><span class=\"line\">    print(f&#x27;出错了，出错信息是&#123;出错消息&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 密码(Exception):</span><br><span class=\"line\">    def __init__(self,长度,最小长度):</span><br><span class=\"line\">        self.长度 = 长度</span><br><span class=\"line\">        self.最小长度 = 最小长度</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&#x27;你输入的长度是&#123;self.长度&#125;，不能少于&#123;self.最小长度&#125;个字符&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def 自定义异常():</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        用户输入 = input()</span><br><span class=\"line\">        if len (用户输入) &lt; 8:</span><br><span class=\"line\">            raise 密码(len(用户输入),8)</span><br><span class=\"line\">    except Exception as 错误信息:</span><br><span class=\"line\">        print(错误信息)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&#x27;密码以输入完成&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">自定义异常()xxxxxxxxxx class 密码(Exception):    def __init__(self,长度,最小长度):        self.长度 = 长度        self.最小长度 = 最小长度        def __str__(self):        return f&#x27;你输入的长度是&#123;self.长度&#125;，不能少于&#123;self.最小长度&#125;个字符&#x27;def 自定义异常():    try:        用户输入 = input()        if len (用户输入) &lt; 8:            raise 密码(len(用户输入),8)    except Exception as 错误信息:        print(错误信息)    else:        print(&#x27;密码以输入完成&#x27;)自定义异常()1</span><br></pre></td></tr></table></figure>\n<h2 id=\"仿射\"><a class=\"markdownIt-Anchor\" href=\"#仿射\">#</a> 仿射</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义解密函数</span><br><span class=\"line\">def decrypt_char(c):</span><br><span class=\"line\">    &#x27;e(x)=11x+6(mod26)&#x27;</span><br><span class=\"line\">    return (19 * (c - 6)) % 26</span><br><span class=\"line\"></span><br><span class=\"line\"># 将字母转换为数字</span><br><span class=\"line\">def char_to_num(char):</span><br><span class=\"line\">    return ord(char) - ord(&#x27;a&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 将数字转换为字母</span><br><span class=\"line\">def num_to_char(num):</span><br><span class=\"line\">    return chr(num + ord(&#x27;a&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 密文</span><br><span class=\"line\">ciphertext = &quot;welcylk&quot;</span><br><span class=\"line\">decrypted_text = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 解密密文</span><br><span class=\"line\">for char in ciphertext:</span><br><span class=\"line\">    decrypted_num = decrypt_char(char_to_num(char))</span><br><span class=\"line\">    decrypted_text += num_to_char(decrypted_num)</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出解密后的文本</span><br><span class=\"line\">print(&quot;Decrypted text:&quot;, decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 将解密后的文本转换为base64形式</span><br><span class=\"line\"># &#x27;在这里，我们使用Python的base64模块将解密后的文本转换为base64形式。&#x27;</span><br><span class=\"line\"># &#x27;首先，我们调用decrypted_text.encode()将解密后的文本转换为字节序列。接下来，我们使用base64.b64encode()对字节序列进行编码，最后，调用.decode()将字节序列转换为字符串。&#x27;</span><br><span class=\"line\"># &#x27;这样，我们就得到了一个base64编码的字符串，即flag。在这段代码中，这个base64编码的字符串被存储在变量base64_flag中。&#x27;</span><br><span class=\"line\"># &#x27;如果你愿意，我可以为你详细解释每一行代码的作用。请告诉我如果你需要进一步的解释。&#x27;</span><br><span class=\"line\">import base64</span><br><span class=\"line\">base64_flag = base64.b64encode(decrypted_text.encode()).decode()</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出base64形式的flag</span><br><span class=\"line\">print(&quot;Base64 flag:&quot;, base64_flag)</span><br><span class=\"line\">#由于解密需要找到 a 的模 26 的逆元，这里需要计算 invmod(a, 26)</span><br><span class=\"line\">#inv_a = invmod(a, 26)  # 如果找不到逆元，这个计算会返回 None</span><br><span class=\"line\">#if inv_a is None:</span><br><span class=\"line\">#print(&quot;无法解密，a 与 26 不互质&quot;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"笔记\"><a class=\"markdownIt-Anchor\" href=\"#笔记\">#</a> 笔记</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">切片</span><br><span class=\"line\">序列[开始位置下标：结束位置下标：步长]</span><br><span class=\"line\"></span><br><span class=\"line\">查找</span><br><span class=\"line\">查找 find正序查找</span><br><span class=\"line\">rfind逆序</span><br><span class=\"line\">没有时返回-1</span><br><span class=\"line\">查找 index没有事报错</span><br><span class=\"line\">查找 count 查找出现几次</span><br><span class=\"line\"></span><br><span class=\"line\">替换</span><br><span class=\"line\">replace（&#x27;&#x27; ，&#x27;&#x27;，替换次数）</span><br><span class=\"line\"></span><br><span class=\"line\">分割</span><br><span class=\"line\">split（分割字符，分割次数）</span><br><span class=\"line\">变量名.split</span><br><span class=\"line\"></span><br><span class=\"line\">合并</span><br><span class=\"line\">&#x27;连接符号&#x27;.join（变量名）</span><br><span class=\"line\"></span><br><span class=\"line\">检查字符串是否以子串开头：startswith</span><br><span class=\"line\">检查字符串是否以子串结尾：endswith</span><br><span class=\"line\">语法：变量名.startswith(endswith)(子串，开始位置下标，结束位置下标）</span><br><span class=\"line\"></span><br><span class=\"line\">len（）查看变量长度</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列表中的增加数据</span><br><span class=\"line\">变量名.append（数据）结尾</span><br><span class=\"line\">变量名.extend（数据）结尾多个</span><br><span class=\"line\">变量名.insert(位置下标，数据)指定位置加数据</span><br><span class=\"line\"></span><br><span class=\"line\">列表中删除</span><br><span class=\"line\">del 变量名</span><br><span class=\"line\">del 变量名[下标]</span><br><span class=\"line\">del 变量名.pop(下标)不指定默认最后一个</span><br><span class=\"line\">变量名.remove（数据）移除列表中某个数据的第一个匹配项</span><br><span class=\"line\">变量名.clear()清空列表，返回结果是[ ]</span><br><span class=\"line\"></span><br><span class=\"line\">列表中的改</span><br><span class=\"line\">变量名[n ]=x，下标为n的数据替换为x</span><br><span class=\"line\">reverse（）把整个列表倒序排列</span><br><span class=\"line\">语法：变量名.reverse（）</span><br><span class=\"line\">sort（）排序</span><br><span class=\"line\">语法：变量名.sort（reverse=False）默认为升序改为True为降序</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">复制列表</span><br><span class=\"line\">copy</span><br><span class=\"line\">语法：变量名.copy()</span><br><span class=\"line\">变量名2=变量名.copy()</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表总结\"><a class=\"markdownIt-Anchor\" href=\"#列表总结\">#</a> 列表总结</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列表总结: </span><br><span class=\"line\">1、列表格式，用中括号存数据，每个数据用逗号隔开[数据1，数据2，数据3]</span><br><span class=\"line\">2、常用操作方法: </span><br><span class=\"line\">(1)Index()查找数据在列表中第一次出现的位置</span><br><span class=\"line\">(2) len0返回列表的数据个数</span><br><span class=\"line\">(3)append 在列表末尾追加个数据</span><br><span class=\"line\">(4)extend在列表末尾追加多个数据</span><br><span class=\"line\">(5)insert在指定位置增加数据</span><br><span class=\"line\">(6)del删除列表或删除列表指定下标</span><br><span class=\"line\">(7)remove删除列表第一个指定的数据</span><br><span class=\"line\">(8)sort列表排序</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元组</span><br><span class=\"line\">只查不改可以删除</span><br><span class=\"line\">定义单个数据</span><br><span class=\"line\">a = （1，）元组</span><br><span class=\"line\">a = （1）整形</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int      float         str      list 列表       tuple 元组</span><br><span class=\"line\">set集合</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"字典1-tuple\"><a class=\"markdownIt-Anchor\" href=\"#字典1-tuple\">#</a> 字典 1 tuple</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字典</span><br><span class=\"line\">字典是按key键和values值的方式成对出现</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">空字典的创建</span><br><span class=\"line\">名字=&#123;&#125;</span><br><span class=\"line\">名字=dict（）</span><br><span class=\"line\"></span><br><span class=\"line\">增加和修改</span><br><span class=\"line\">语法：字典序列名[键] = 值</span><br><span class=\"line\">有泽改 无泽增</span><br><span class=\"line\"></span><br><span class=\"line\">删数据</span><br><span class=\"line\">del字典序列名[键] 一个</span><br><span class=\"line\">del字典序列名 删除字典</span><br><span class=\"line\">清空字典：clear（）</span><br><span class=\"line\">语法：字典序列名.clear（）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">查</span><br><span class=\"line\">字典序列名[键] 存在返回值 不存在报错</span><br><span class=\"line\">get（）</span><br><span class=\"line\">语法：字典序列名.get(键，随便写)</span><br><span class=\"line\">如果存在返回值，不存在返回你写的值如果没写返回None</span><br><span class=\"line\">values（）</span><br><span class=\"line\">语法：字典序列名.values()</span><br><span class=\"line\">返回所有值</span><br><span class=\"line\">items（）</span><br><span class=\"line\">语法：字典序列名.items（）</span><br><span class=\"line\">可迭代对象（里面的数据是元组），迭代就是重复反馈的过程</span><br><span class=\"line\">a=&#123;&#x27;华为&#x27;:520,&#x27;小米&#x27;:520,&#x27;苹果&#x27;:14,&#x27;三星&#x27;:24&#125;</span><br><span class=\"line\">print(a.items ()) </span><br><span class=\"line\">dict_items([(&#x27;华为&#x27;，520),(&#x27;小米&#x27;，520),</span><br><span class=\"line\">(&#x27;苹果&#x27;，14),(&#x27;三星&#x27;，24)])1</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合set\"><a class=\"markdownIt-Anchor\" href=\"#集合set\">#</a> 集合 set</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">集合set</span><br><span class=\"line\">set（）空集合</span><br><span class=\"line\">有数据用&#123;&#125;</span><br><span class=\"line\">自动去重</span><br><span class=\"line\"></span><br><span class=\"line\">增加数据：   集合名.add（数据）</span><br><span class=\"line\">追加数据：   集合名.update（数据序列）</span><br><span class=\"line\">           数据序列：列表，字符串，元组</span><br><span class=\"line\">删除数据：</span><br><span class=\"line\">               集合名.remove(数据)不存在报错</span><br><span class=\"line\">               集合名.discard(数据)不存在不报错</span><br><span class=\"line\">集合名.pop()</span><br><span class=\"line\">  查看返回数据</span><br><span class=\"line\">  变量名=集合名.pop()</span><br><span class=\"line\">  查看被删除的数据print（变量名）</span><br><span class=\"line\">  查看集合还剩什么print（集合名）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"range\"><a class=\"markdownIt-Anchor\" href=\"#range\">#</a> range</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">range（start，end，step）</span><br><span class=\"line\">range（0，11，1）从0到10</span><br><span class=\"line\">a=[]</span><br><span class=\"line\">for i in range(0，11)：</span><br><span class=\"line\">      a.append(i)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">等效</span><br><span class=\"line\">b=[i for i in range(0,11)]</span><br><span class=\"line\"></span><br><span class=\"line\">b=[i for i in range(0,11,2)]</span><br><span class=\"line\">b=[i for i in range(0,11) if i%2 ==0]等效取偶数</span><br></pre></td></tr></table></figure>\n<h2 id=\"字典2-tuple\"><a class=\"markdownIt-Anchor\" href=\"#字典2-tuple\">#</a> 字典 2 tuple</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字典</span><br><span class=\"line\">a=[&#x27;华为&#x27;，&#x27;小米&#x27;，&#x27;苹果&#x27;，&#x27;三星&#x27;]</span><br><span class=\"line\">b=[100,200,150,20]</span><br><span class=\"line\">c=&#123;a[i]:b[i] for i in range(len(a))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">提取字典中的目</span><br><span class=\"line\">a=&#123;&#x27;华为&#x27;:520,&#x27;小米&#x27;:520,&#x27;苹果&#x27;:14,&#x27;三星&#x27;:24&#125;</span><br><span class=\"line\">b=&#123;i，j  for I in a.items（）if j&gt;100&#125;</span><br><span class=\"line\">输出&#123;&#x27;华为&#x27;:520,&#x27;小米&#x27;:520&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">集合去重c=[2，2，3]</span><br><span class=\"line\">d=&#123;i**3 for i in c&#125;</span><br><span class=\"line\">输出&#123;8，27&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">enumerate（）</span><br><span class=\"line\">输出为例（0，第一个元素）</span><br><span class=\"line\">for i in enumerate（a，1）</span><br><span class=\"line\">输出从一开始（1，第一个元素）</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数-2\"><a class=\"markdownIt-Anchor\" href=\"#函数-2\">#</a> 函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数</span><br><span class=\"line\">lambda函数</span><br><span class=\"line\">lambda 形参：表达式</span><br><span class=\"line\">def 函数名（）：</span><br><span class=\"line\">     return 50</span><br><span class=\"line\">print(函数名（）)</span><br><span class=\"line\">等效于</span><br><span class=\"line\">函数名=lambda：50</span><br><span class=\"line\">print（（lambda：50）（））</span><br><span class=\"line\"></span><br><span class=\"line\">俩个形参</span><br><span class=\"line\">print（（lambda a，b：a+b）（30+40））</span><br><span class=\"line\">def 函数名 （a，b）</span><br><span class=\"line\">    return a+b</span><br><span class=\"line\">结果=函数名（30，40）</span><br><span class=\"line\">print（结果）</span><br><span class=\"line\"></span><br><span class=\"line\">可变位置参数</span><br><span class=\"line\">print（（lambda  *args：args）（1，5，2，3，4）</span><br><span class=\"line\">输出（1，5，2，3，4）</span><br><span class=\"line\"></span><br><span class=\"line\">可变关键字参数</span><br><span class=\"line\">print（（lambda **kwargs：kwargs）（姓名=&#x27;圥忈&#x27;，年龄=20））</span><br><span class=\"line\">输出&#123;&#x27;姓名&#x27;:&#x27;圥忈&#x27;，&#x27;年龄&#x27;:&#x27;20&#x27;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def name(a,b):</span><br><span class=\"line\">    return a if a&gt;b else b</span><br><span class=\"line\">print (name(1,2))</span><br><span class=\"line\">等效于</span><br><span class=\"line\">print（（lambda a，b：a if a&gt;b else b）（2，1）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">排序</span><br><span class=\"line\">c = [&#123;&#x27;名&#x27;：&#x27;圥忈&#x27;，&#x27;年龄&#x27;:20&#125;,&#123;&#x27;名&#x27;：&#x27;小李&#x27;，&#x27;年龄&#x27;:30&#125;,&#123;&#x27;名&#x27;：&#x27;小赵&#x27;，&#x27;年龄&#x27;:40&#125;,]</span><br><span class=\"line\">c.sort(key=lambda x:x[&#x27;名&#x27;]，reverse =True)</span><br><span class=\"line\">print（c）降序      False升序</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filter（函数名，可迭代对象）作用：过渡序列中不符合条件的元素</span><br></pre></td></tr></table></figure>\n<h2 id=\"推导式总结\"><a class=\"markdownIt-Anchor\" href=\"#推导式总结\">#</a> 推导式总结</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推导式总结</span><br><span class=\"line\">推导式有什么用？简化代码</span><br><span class=\"line\">常用推导式:列表推导式和字典推导式</span><br><span class=\"line\">[(xx for xx in range()] #列表推导式</span><br><span class=\"line\">&#123;xx1: x02 for... in...&#125;  #字典推导式</span><br><span class=\"line\">&#123;xx for xx in...&#125; #集合推导式(不常用，现阶段知这么一回事就可以了)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数函数式编程之内置高阶函数\"><a class=\"markdownIt-Anchor\" href=\"#函数函数式编程之内置高阶函数\">#</a> 函数 (函数式编程之内置高阶函数)</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数(函数式编程之内置高阶函数) </span><br><span class=\"line\">1、filter(函数名，可迭代对象)作用:过渡序列中不符合条件的元素</span><br><span class=\"line\">列表名=[1,2,3.4,5,6,7,8,9,10]</span><br><span class=\"line\">def 函数名(x): </span><br><span class=\"line\">return x %2 == 0                         filter( lambda x:x%2,列表名) </span><br><span class=\"line\">结果=filter(函数名，列表名) </span><br><span class=\"line\">print(结果)#打印的是对象地址</span><br><span class=\"line\">print(list(结果)) </span><br><span class=\"line\">注: </span><br><span class=\"line\">filter有两个参数，第1参数可以是函数，也可以是None. </span><br><span class=\"line\">当第1个参数是函数的时候，将第2个参数中每个元素进行计算。 </span><br><span class=\"line\">当第1个参数是None时，直接将第二个参数中为True的值筛选出来。</span><br></pre></td></tr></table></figure>\n<h2 id=\"斐波那契数列\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契数列\">#</a> 斐波那契数列</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写一个程序：打印斐波那契数列。</span><br><span class=\"line\"></span><br><span class=\"line\">提示:斐波那契数列是一系列的数字，其中下一个数字是前面两个数字的和。例如：</span><br><span class=\"line\"></span><br><span class=\"line\">1 1 2 3 5 8 ...</span><br><span class=\"line\">任务:</span><br><span class=\"line\"></span><br><span class=\"line\">输入一个整数，并将其存储在n中。</span><br><span class=\"line\">定义两个整数变量t1和t2，其值均为1。</span><br><span class=\"line\">使用一个for循环，从i = 1到n，包括n进行循环。</span><br><span class=\"line\">在每个循环中</span><br><span class=\"line\">打印t1的值。</span><br><span class=\"line\">定义 result 为 t1 和 t2 之和。</span><br><span class=\"line\">将 t2 的值分配给 t1。</span><br><span class=\"line\">将 result 的值分配给 t2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = int(input())</span><br><span class=\"line\">t1 = 1</span><br><span class=\"line\">t2 = 1</span><br><span class=\"line\">result = 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 1到n的循环</span><br><span class=\"line\">for i in range(1,n+1):</span><br><span class=\"line\">    # 打印t1</span><br><span class=\"line\">    print(t1)</span><br><span class=\"line\">  </span><br><span class=\"line\">    # 定义result为t1和t2之和</span><br><span class=\"line\">    result = t1 + t2</span><br><span class=\"line\"></span><br><span class=\"line\">    # 将 `t2` 的值分配给 `t1`</span><br><span class=\"line\">    t1 = t2</span><br><span class=\"line\"></span><br><span class=\"line\">    # 将 `result` 的值分配给 `t2`</span><br><span class=\"line\">    t2 = result</span><br></pre></td></tr></table></figure>\n<h2 id=\"打印小于n的斐波那契数\"><a class=\"markdownIt-Anchor\" href=\"#打印小于n的斐波那契数\">#</a> 打印小于 n 的斐波那契数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写一个程序：打印所有小于n的斐波那契数。</span><br><span class=\"line\"></span><br><span class=\"line\">提示: 斐波那契数列是一系列的数字，其中一个数字是最后两个数字的相加。比如说：</span><br><span class=\"line\"></span><br><span class=\"line\">1 1 2 3 5 ...</span><br><span class=\"line\">任务：</span><br><span class=\"line\"></span><br><span class=\"line\">接受用户的整数输入，并将其存储在n中。</span><br><span class=\"line\">定义两个整数变量t1和t2，其值均为1。</span><br><span class=\"line\">当t1小于n时，运行循环。</span><br><span class=\"line\">在每个循环中，打印t1的值。</span><br><span class=\"line\">同时，定义result 变量为t1和t2之和。</span><br><span class=\"line\">将t2的值分配给t1。</span><br><span class=\"line\">将 result 的值分配给 t2。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = int(input())</span><br><span class=\"line\">t1 = 1</span><br><span class=\"line\">t2 = 1</span><br><span class=\"line\">result = 0</span><br><span class=\"line\">#循环</span><br><span class=\"line\">for i in range(1,n):</span><br><span class=\"line\"># 打印t1</span><br><span class=\"line\">    print(t1)</span><br><span class=\"line\">    # 定义result 为t1和t2之和</span><br><span class=\"line\">    result = t1 + t2</span><br><span class=\"line\">    # 将t2的值分配给t1</span><br><span class=\"line\">    t1 = t2</span><br><span class=\"line\">    if t1 &gt;= n:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    t2 = result</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转列表\"><a class=\"markdownIt-Anchor\" href=\"#反转列表\">#</a> 反转列表</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写一个程序：反转一个给定的列表。</span><br><span class=\"line\"></span><br><span class=\"line\">创建列表my_list并将[1, 2, 3, 4]分配给它。</span><br><span class=\"line\">创建一个新的列表，并将my_list的元素反转后添加到新列表中。</span><br><span class=\"line\">输出新列表</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4]</span><br><span class=\"line\">print(my_list[::-1])</span><br></pre></td></tr></table></figure>\n<h2 id=\"如果您想要让用户输入一个元组\"><a class=\"markdownIt-Anchor\" href=\"#如果您想要让用户输入一个元组\">#</a> 如果您想要让用户输入一个元组</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_str = input(&quot;请输入一个元组，元素之间用逗号分隔（输入 &#x27;q&#x27; 结束）: &quot;)</span><br><span class=\"line\">if input_str.lower() == &#x27;q&#x27;:</span><br><span class=\"line\">    exit()</span><br><span class=\"line\"></span><br><span class=\"line\">input_tuple = tuple(map(int, input_str.split(&#x27;,&#x27;)))</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 for 循环遍历元组</span><br><span class=\"line\">for num in input_tuple:</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数可变参数\"><a class=\"markdownIt-Anchor\" href=\"#函数可变参数\">#</a> 函数可变参数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写一个程序，创建一个可接受可变数量参数的函数，并返回所有参数的乘积:</span><br><span class=\"line\"></span><br><span class=\"line\">创建multiply_numbers()的函数，可以接受任何数量的参数（0或更多）。</span><br><span class=\"line\">在该函数中，计算所有参数(每个参数为整数)的乘积，并返回结果。</span><br><span class=\"line\">在函数外:</span><br><span class=\"line\"></span><br><span class=\"line\">输入三个整数。</span><br><span class=\"line\">用这三个整数调用multiply_numbers()函数并打印返回值。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def multiply_numbers(*args):</span><br><span class=\"line\">    result = 1</span><br><span class=\"line\">    for num in args:</span><br><span class=\"line\">        result *= num</span><br><span class=\"line\">    return result</span><br><span class=\"line\"></span><br><span class=\"line\">num1 = int(input(&quot;&quot;))</span><br><span class=\"line\">num2 = int(input(&quot;&quot;))</span><br><span class=\"line\">num3 = int(input(&quot;&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">result = multiply_numbers(num1, num2, num3)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"车辆类中创建引擎类对象\"><a class=\"markdownIt-Anchor\" href=\"#车辆类中创建引擎类对象\">#</a> 车辆类中创建引擎类对象</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写写一个程序，在一个类中创建另一个类的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">创建类:</span><br><span class=\"line\"></span><br><span class=\"line\">创建两个类：发动机类Engine，属性为动力power；车辆类Vehicle，属性为: 轮子wheels和发动机engine。</span><br><span class=\"line\">Engine类__init__()方法，带两个参数。self和power来创建并初始化Engine类的power属性。</span><br><span class=\"line\">Vehicle类__init__()方法，带两个参数self和wheels来初始化Vehicle类的wheels属性。</span><br><span class=\"line\">在Vehicle的init__()方法中，engine属性应该为一个Engine类的对象，其power属性等于400。</span><br><span class=\"line\">在Vehicle类中创建get_power()方法，打印 属性engine的power属性。</span><br><span class=\"line\">在类外:</span><br><span class=\"line\"></span><br><span class=\"line\">创建车辆Vehicle类对象，轮子wheels属性等于4。</span><br><span class=\"line\">调用该对象的get_power()方法。</span><br><span class=\"line\">更多提示，请看代码示例。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Engine:</span><br><span class=\"line\">    def __init__(self, power):</span><br><span class=\"line\">        self.power = power</span><br><span class=\"line\"></span><br><span class=\"line\">class Vehicle:</span><br><span class=\"line\">    def __init__(self, wheels):</span><br><span class=\"line\">        self.wheels = wheels</span><br><span class=\"line\">        self.engine = Engine(400)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_power(self):</span><br><span class=\"line\">        print(self.engine.power)</span><br><span class=\"line\">my_vehicle = Vehicle(4)</span><br><span class=\"line\">my_vehicle.get_power()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}