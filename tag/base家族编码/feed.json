{
    "version": "https://jsonfeed.org/version/1",
    "title": "圥忈的博客 • All posts by \"base家族编码\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/05/11/Base%E5%AE%B6%E6%97%8F%E7%BC%96%E7%A0%81/",
            "url": "http://example.com/2024/05/11/Base%E5%AE%B6%E6%97%8F%E7%BC%96%E7%A0%81/",
            "title": "'Base家族编码'",
            "date_published": "2024-05-11T06:40:47.000Z",
            "content_html": "<h2 id=\"base-家族\"><a class=\"markdownIt-Anchor\" href=\"#base-家族\">#</a> Base 家族</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405072012952.png\" alt=\"\"></p>\n<h3 id=\"base64-编码\"><a class=\"markdownIt-Anchor\" href=\"#base64-编码\">#</a> Base64 编码</h3>\n<p>原理介绍：<br>\n1、将原始数据每三个字节作为一组，24bit<br>\n2、将 24bit 分为四组，每组 6 个 bit<br>\n3、在每组前面补加零，补全 4 组 8bit（原始数据从三字节变成四字节，增大近 90%）<br>\n4、根据 base64 码表对应符号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\">文      本：\tM        a        n</span><br><span class=\"line\">ASCII 编码：\t77       97       110</span><br><span class=\"line\">8bit  字节：\t01001101 01100001 01101110</span><br><span class=\"line\">6bit  字节：\t010011 010110 000101 101110</span><br><span class=\"line\">Base64索引：\t19     22     5      46</span><br><span class=\"line\">Base64编码：\tT      W      F      u</span><br></pre></td></tr></table></figure>\n<p>当位数不足时如：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405071027868.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个字节：两个字节共16个二进制位，依旧按照规则进行分组。此时总共16个二进制位，每6个一组，则第三组缺少2位，用0补齐，得到三个Base64编码，第四组完全没有数据则用“=”补上。因此，上图中“BC”转换之后为“QKM=”</span><br><span class=\"line\"></span><br><span class=\"line\">一个字节：一个字节共8个二进制位，依旧按照规则进行分组。此时共8个二进制位，每6个一组，则第二组缺少4位，用0补齐，得到两个Base64编码，而后面两组没有对应数据，都用“=”补上。因此，上图中“A”转换之后为“QQ==”</span><br></pre></td></tr></table></figure>\n<p>Base64 算法代码特征：</p>\n<p>A-Za-z0-9+/=</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405071156161.png\" alt=\"\"></p>\n<p>解码 Python 实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\"></span><br><span class=\"line\">#新表</span><br><span class=\"line\">biao = &#x27;&#x27;</span><br><span class=\"line\">#密文</span><br><span class=\"line\">origin = &quot;&quot;</span><br><span class=\"line\">#</span><br><span class=\"line\">a = str.maketrans(biao,&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;)</span><br><span class=\"line\">print(base64.b64decode(origin.translate(a)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"base32-编码\"><a class=\"markdownIt-Anchor\" href=\"#base32-编码\">#</a> Base32 编码</h3>\n<p>介绍：Base32 编码使用 32 个 ASCII 字符对任何数据进行编码，将原数据二进制形式取指定位数转换为 ASCII 码。首先获取数据的二进制形式，将其串联起来，每 5 个比特为一组进行切分，每一组内的 5 个比特可转换到指定的 32 个 ASCII 字符中的一个，将转换后的 ASCII 字符连接起来，就是编码后的数据。</p>\n<p>base32 编码表（A-Z2-7）：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/keep212/nima/main/202405072021690.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//编码实现</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char date[100]=&quot;bacde&quot;;</span><br><span class=\"line\">    char code[100];</span><br><span class=\"line\">    unsigned char table[33]=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&quot;;</span><br><span class=\"line\">    int len_date,len_code,i,j,num;</span><br><span class=\"line\"></span><br><span class=\"line\">    len_date=strlen(date);</span><br><span class=\"line\">    printf(&quot;length of date=%d\\n&quot;,len_date);</span><br><span class=\"line\">    printf(&quot;date: %s\\n&quot;,date);</span><br><span class=\"line\">    if(len_date%5!=0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len_code=(len_date/5+1)*8;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len_code=(len_date/5)*8; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//关键代码块——————————————————————————————————————————————————————————————</span><br><span class=\"line\">    for(i=0,j=0;i&lt;len_code;i+=5,j+=8)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        code[j]=table[date[i]&gt;&gt;3];</span><br><span class=\"line\">        code[j+1]=table[((date[i]&amp;7)&lt;&lt;2)|(date[i+1]&gt;&gt;6)];</span><br><span class=\"line\">        code[j+2]=table[(date[i+1]&gt;&gt;1)&amp;31];</span><br><span class=\"line\">        code[j+3]=table[(date[i+1]&amp;1)&lt;&lt;4|date[i+2]&gt;&gt;4];</span><br><span class=\"line\">        code[j+4]=table[(date[i+2]&amp;15)&lt;&lt;1|date[i+3]&gt;&gt;7];</span><br><span class=\"line\">        code[j+5]=table[(date[i+3]&gt;&gt;2)&amp;31];</span><br><span class=\"line\">        code[j+6]=table[(date[i+3]&amp;3)&lt;&lt;3|date[i+4]&gt;&gt;5];</span><br><span class=\"line\">        code[j+7]=table[date[i+4]&amp;31];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//————————————————————————————————————————————————————————————————————————-</span><br><span class=\"line\">    num=len_date%5;</span><br><span class=\"line\">    switch(num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        case 1: </span><br><span class=\"line\">            for(i=1;i&lt;8-num;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                code[len_code-i]=&#x27;=&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            for(i=1;i&lt;7-num;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                code[len_code-i]=&#x27;=&#x27;;</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">            for(i=1;i&lt;7-num;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                code[len_code-i]=&#x27;=&#x27;;</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">            code[len_code-1]=&#x27;=&#x27;;    </span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;length of code =%d\\n&quot;,len_code);</span><br><span class=\"line\">    printf(&quot;the code:&quot;); </span><br><span class=\"line\">    for(i=0;i&lt;len_code;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;%c&quot;,code[i]);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"base16-编码\"><a class=\"markdownIt-Anchor\" href=\"#base16-编码\">#</a> Base16 编码</h3>\n<p>介绍：Base16 编码就是将 ASCII 字符集中可打印的字符 (数字 0-9 和字母 A-F) 对应的二进制字节数据进行编码，编码的方式：先将数据 (根据 ASCII 编码，UTF-8 编码等) 转成对应的二进制数，不足 8 比特位高位补 0. 然后将所有的二进制全部串起来，4 个二进制位为一组，转化成对应十进制数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char date[100]=&quot;bacde&quot;;</span><br><span class=\"line\">    char code[100];</span><br><span class=\"line\">    unsigned char table[17]=&quot;0123456789ABCDEF&quot;;</span><br><span class=\"line\">    int len_date,len_code,i,j,num;</span><br><span class=\"line\"></span><br><span class=\"line\">    len_date=strlen(date);</span><br><span class=\"line\">    printf(&quot;length of date :\\n%d\\n&quot;,len_date);</span><br><span class=\"line\">    printf(&quot;date:\\n%s\\n&quot;,date);</span><br><span class=\"line\">    len_code=len_date*2;</span><br><span class=\"line\">//————————————————————————————————————————————————————————————————————</span><br><span class=\"line\">   //关键代码块</span><br><span class=\"line\">    for(i=0,j=0;i&lt;len_date;i++,j+=2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        code[j]=table[date[i]&gt;&gt;4];</span><br><span class=\"line\">        code[j+1]=table[date[i]&amp;15]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//——————————————————————————————————————————————————————————————————————</span><br><span class=\"line\">    printf(&quot;length of code:\\n%d\\n&quot;,len_code);</span><br><span class=\"line\">    printf(&quot;code: \\n&quot;); </span><br><span class=\"line\">    for(i=0;i&lt;len_code;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;%c&quot;,code[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他简述\"><a class=\"markdownIt-Anchor\" href=\"#其他简述\">#</a> 其他简述</h3>\n<h4 id=\"base58-编码\"><a class=\"markdownIt-Anchor\" href=\"#base58-编码\">#</a> Base58 编码：</h4>\n<p>Base58 是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生 Bitcoin 的钱包地址。相比 Base64，Base58 不使用数字 “0”，字母大写 “O”，字母大写 “I”，和字母小写 “l”，以及 “+” 和 “/” 符号。 Base58 字母表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</span><br></pre></td></tr></table></figure>\n<h4 id=\"base62\"><a class=\"markdownIt-Anchor\" href=\"#base62\">#</a> Base62</h4>\n<p>Base62 使用了 62 个字符编码，包括 0-9，a-z，A-Z。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：UxIZABUpAxEZUhIxw1UhIxEFUhIVwJUlERA1</span><br></pre></td></tr></table></figure>\n<h4 id=\"base85\"><a class=\"markdownIt-Anchor\" href=\"#base85\">#</a> Base85</h4>\n<p>Base85 是一种类似于 Base64 的二进制文本编码形式，通过使用五个 ASCII 字符来表示四个字节的二进制数据。例如，它用于将图像嵌入到 Adobe PDF 文件中。</p>\n<p>Base85 包含下列字符：</p>\n<p>$%()*+,-./0123456789:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：keEPJR&#x27;5S\\JE45?jM$Q6XcN</span><br></pre></td></tr></table></figure>\n<h4 id=\"base91\"><a class=\"markdownIt-Anchor\" href=\"#base91\">#</a> Base91</h4>\n<p>顾名思义，Base91 需要 91 个字符来表示 ASCII 编码的二进制数据。</p>\n<p>Base91 包含下列字符：</p>\n<p>!&quot;#$%&amp;()*+,./0123456789:;&lt;=&gt;？</p>\n<p>@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：*~v6uRhaugfz5el@Dh!q&amp;LB</span><br></pre></td></tr></table></figure>\n<h4 id=\"base92\"><a class=\"markdownIt-Anchor\" href=\"#base92\">#</a> Base92</h4>\n<p>Base92 是用 92 个可打印字符表示 8 位二进制数据 (含无法显示 打印字符) 的编码方式。</p>\n<p>Base92 包含下列字符：</p>\n<p>!#$%&amp;’()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_abcdefghijklmnopqrstuvwxyz{|}~</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：toxRX&lt;@w&lt;U&quot;[27@\\f!Mpc*</span><br></pre></td></tr></table></figure>\n<h4 id=\"base94\"><a class=\"markdownIt-Anchor\" href=\"#base94\">#</a> Base94</h4>\n<p>Base94 是用 94 个可打印字符表示 8 位二进制数据 (含无法显示 打印字符) 的编码方式。</p>\n<p>Base94 包含下列字符：</p>\n<p>!&quot;#$%&amp;’()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~ 10.Base100</p>\n<h4 id=\"base100-编码\"><a class=\"markdownIt-Anchor\" href=\"#base100-编码\">#</a> Base100 编码</h4>\n<p>（又名：Emoji 表情符号编码 / 解码），可将文本内容编码为 Emoji 表情符号；同时也可以将编码后的 Emoji 表情符号内容解码为文本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：编码前：这是一个例子</span><br><span class=\"line\"> </span><br><span class=\"line\">    编码后：📟💶💐📝💏💦📛💯👷📛💯💡📛💵💂📜💤💇</span><br></pre></td></tr></table></figure>\n<h4 id=\"base128\"><a class=\"markdownIt-Anchor\" href=\"#base128\">#</a> Base128</h4>\n<p>Base128 是用 128 个字符表示 8 位二进制数据的编码方式。</p>\n<p>Base128 包含下列字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\\xb5\\xb6\\xb7\\xbc\\xbd\\xbe\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"本文作者-zoyager-welcome\"><a class=\"markdownIt-Anchor\" href=\"#本文作者-zoyager-welcome\">#</a> # 本文作者： zoyager @WELCOME</h2>\n<p># 本文链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly96b3lhZ2VyLmdpdGh1Yi5pby8yMDI0LzA1LzA3L0Jhc2UlRTUlQUUlQjYlRTYlOTclOEYlRTclQkMlOTYlRTclQTAlODEv\">https://zoyager.github.io/2024/05/07/Base 家族编码 /</span><br>\n# 版权声明： 本站所有文章除特别声明外，均采用 (CC) BY-NC-SA 许可协议。转载请注明出处！</p>\n",
            "tags": [
                "Base家族编码"
            ]
        }
    ]
}